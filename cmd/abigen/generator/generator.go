// SPDX-License-Identifier: BUSL-1.1
//
// Copyright (C) 2023, Berachain Foundation. All rights reserved.
// Use of this software is govered by the Business Source License included
// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
//
// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
// VERSIONS OF THE LICENSED WORK.
//
// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
//
// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
// TITLE.

package generator

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/dave/jennifer/jen"
)

// `abiPkg` is the package name of the `abi` package.
const abiPkg = "github.com/berachain/stargazer/eth/types/abi"

// `Run` generates a golang file representing a `CompiliedContract` from
// the output of `forge build`.
func Run(packageName, inputPath, outputPath, varName string) error {
	// Read the JSON data from the file.
	data, err := os.ReadFile(inputPath) //#nosec:G304 // not part of live chain.
	if err != nil {
		return err
	}

	// Declare a variable to hold the unmarshaled JSON data.
	var forgeJSON interface{}

	// Unmarshal the JSON data into the forgeJSON variable.
	if err = json.Unmarshal(data, &forgeJSON); err != nil {
		return err
	}

	// Load ABI String.
	abiString := forgeJSON.(map[string]interface{})["abi"]
	abiStringMarshalled, err := json.Marshal(abiString)
	if err != nil {
		return err
	}

	// Load Bytecode String.
	bytecode := forgeJSON.(map[string]interface{})["bytecode"].(map[string]interface{})["object"]
	bytecodeMarshalled, err := json.Marshal(bytecode)
	if err != nil {
		return err
	}

	// Build the Golang file.
	f := buildFile(packageName, varName, string(abiStringMarshalled), string(bytecodeMarshalled))

	// Create Path.
	outFile, err := os.Create(outputPath) //#nosec:G304 // not part of live chain.
	if err != nil {
		log.Fatal(err)
	}

	// Output to file.
	_, err = outFile.WriteString(fmt.Sprintf("%#v", f) + "\n")
	if err != nil {
		return err
	}

	// Sync the file.
	if err = outFile.Sync(); err != nil {
		return err
	}

	return nil
}

// `buildFile` builds a golang file representing a `CompiliedContract` from the
// provided packageName, varName, abiStringMarshalled, and bytecodeMarshalled.
func buildFile(packageName, varName, abiStringMarshalled, bytecodeMarshalled string) *jen.File {
	f := jen.NewFilePath(packageName)
	f.HeaderComment("Code generated by stargazer. DO NOT EDIT.")
	f.Var().Id(varName).Qual(abiPkg, "CompiliedContract")
	f.Func().Id("init").Params().Block(
		jen.Id(varName).Op("=").Qual(abiPkg, "BuildCompiledContract").Call(
			jen.Id("\""+strings.ReplaceAll(abiStringMarshalled, "\"", "\\\"")+"\""),
			jen.Id(bytecodeMarshalled),
		),
	)
	return f
}
