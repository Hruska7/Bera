// Code generated by mockery v2.35.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// Broadcaster is an autogenerated mock type for the Broadcaster type
type Broadcaster struct {
	mock.Mock
}

type Broadcaster_Expecter struct {
	mock *mock.Mock
}

func (_m *Broadcaster) EXPECT() *Broadcaster_Expecter {
	return &Broadcaster_Expecter{mock: &_m.Mock}
}

// BroadcastTxSync provides a mock function with given fields: txBytes
func (_m *Broadcaster) BroadcastTxSync(txBytes []byte) (*types.TxResponse, error) {
	ret := _m.Called(txBytes)

	var r0 *types.TxResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*types.TxResponse, error)); ok {
		return rf(txBytes)
	}
	if rf, ok := ret.Get(0).(func([]byte) *types.TxResponse); ok {
		r0 = rf(txBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(txBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Broadcaster_BroadcastTxSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastTxSync'
type Broadcaster_BroadcastTxSync_Call struct {
	*mock.Call
}

// BroadcastTxSync is a helper method to define mock.On call
//   - txBytes []byte
func (_e *Broadcaster_Expecter) BroadcastTxSync(txBytes interface{}) *Broadcaster_BroadcastTxSync_Call {
	return &Broadcaster_BroadcastTxSync_Call{Call: _e.mock.On("BroadcastTxSync", txBytes)}
}

func (_c *Broadcaster_BroadcastTxSync_Call) Run(run func(txBytes []byte)) *Broadcaster_BroadcastTxSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Broadcaster_BroadcastTxSync_Call) Return(res *types.TxResponse, err error) *Broadcaster_BroadcastTxSync_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *Broadcaster_BroadcastTxSync_Call) RunAndReturn(run func([]byte) (*types.TxResponse, error)) *Broadcaster_BroadcastTxSync_Call {
	_c.Call.Return(run)
	return _c
}

// NewBroadcaster creates a new instance of Broadcaster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroadcaster(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broadcaster {
	mock := &Broadcaster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
