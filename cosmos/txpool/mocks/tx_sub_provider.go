// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	core "github.com/ethereum/go-ethereum/core"
	event "github.com/ethereum/go-ethereum/event"

	mock "github.com/stretchr/testify/mock"
)

// TxSubProvider is an autogenerated mock type for the TxSubProvider type.
type TxSubProvider struct {
	mock.Mock
}

type TxSubProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *TxSubProvider) EXPECT() *TxSubProvider_Expecter {
	return &TxSubProvider_Expecter{mock: &_m.Mock}
}

// SubscribeNewTxsEvent provides a mock function with given fields: ch.
func (_m *TxSubProvider) SubscribeNewTxsEvent(ch chan<- core.NewTxsEvent) event.Subscription {
	ret := _m.Called(ch)

	var r0 event.Subscription
	if rf, ok := ret.Get(0).(func(chan<- core.NewTxsEvent) event.Subscription); ok {
		r0 = rf(ch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	return r0
}

// TxSubProvider_SubscribeNewTxsEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeNewTxsEvent'.
type TxSubProvider_SubscribeNewTxsEvent_Call struct {
	*mock.Call
}

// SubscribeNewTxsEvent is a helper method to define mock.On call
//   - ch chan<- core.NewTxsEvent
func (_e *TxSubProvider_Expecter) SubscribeNewTxsEvent(ch interface{}) *TxSubProvider_SubscribeNewTxsEvent_Call {
	return &TxSubProvider_SubscribeNewTxsEvent_Call{Call: _e.mock.On("SubscribeNewTxsEvent", ch)}
}

func (_c *TxSubProvider_SubscribeNewTxsEvent_Call) Run(run func(ch chan<- core.NewTxsEvent)) *TxSubProvider_SubscribeNewTxsEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan<- core.NewTxsEvent))
	})
	return _c
}

func (_c *TxSubProvider_SubscribeNewTxsEvent_Call) Return(_a0 event.Subscription) *TxSubProvider_SubscribeNewTxsEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxSubProvider_SubscribeNewTxsEvent_Call) RunAndReturn(run func(chan<- core.NewTxsEvent) event.Subscription) *TxSubProvider_SubscribeNewTxsEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxSubProvider creates a new instance of TxSubProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxSubProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxSubProvider {
	mock := &TxSubProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
