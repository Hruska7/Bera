// SPDX-License-Identifier: BUSL-1.1
//
// Copyright (C) 2023, Berachain Foundation. All rights reserved.
// Use of this software is govered by the Business Source License included
// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
//
// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
// VERSIONS OF THE LICENSED WORK.
//
// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
//
// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
// TITLE.

syntax = "proto3";
package polaris.erc20.v1alpha1;

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "pkg.berachain.dev/polaris/cosmos/x/erc20/types";

// MsgService defines the x/erc20 Msg service.
service MsgService {
  option (cosmos.msg.v1.service) = true;

  // ConvertERC20ToCosmos converts ERC20 tokens to Cosmos tokens.
  rpc ConvertERC20ToCosmos(ConvertERC20ToCosmosRequest) returns (ConvertERC20ToCosmosResponse) {
    option (google.api.http).post = "/polaris/erc20/convert_erc20_to_cosmos";
  }

  // ConvertCosmosToERC20 converts Cosmos tokens to ERC20 tokens.
  rpc ConvertCosmosToERC20(ConvertCosmosToERC20Request) returns (ConvertCosmosToERC20Response) {
    option (google.api.http).post = "/polaris/erc20/convert_cosmos_to_erc20";
  }
}

// ConvertERC20ToCosmosRequest defines a message to convert ERC20 tokens to Cosmos tokens.
message ConvertERC20ToCosmosRequest {
  // token is the address of the ERC20 token.
  string token = 1 [(cosmos_proto.scalar) = "cosmos.AccAddress"];

  // receipient is the address of the recipient.
  string recipient = 2 [(cosmos_proto.scalar) = "cosmos.AccAddress"];

  // amount is the amount of tokens to convert.
  string amount = 3 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
}

// ConvertERC20ToCosmosResponse defines the response for the ConvertERC20ToCosmosRequest.
message ConvertERC20ToCosmosResponse {
  // success indicates if the conversion was successful.
  bool success = 1;
}

// ConvertCosmosToERC20Request defines a message to convert Cosmos tokens to ERC20 tokens.
message ConvertCosmosToERC20Request {
  // token is the address of the ERC20 token.
  string token = 1 [(cosmos_proto.scalar) = "cosmos.AccAddress"];

  // recipient is the address of the recipient.
  string recipient = 2 [(cosmos_proto.scalar) = "cosmos.AccAddress"];

  // amount is the amount of tokens to convert.
  string amount = 3 [(gogoproto.customtype) = "cosmossdk.io/math.Int"];
}

// ConvertCosmosToERC20Response defines the response for the ConvertCosmosToERC20Request.
message ConvertCosmosToERC20Response {
  // success indicates if the conversion was successful.
  bool success = 1;
}
