// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// CometRemoteCache is an autogenerated mock type for the CometRemoteCache type
type CometRemoteCache struct {
	mock.Mock
}

type CometRemoteCache_Expecter struct {
	mock *mock.Mock
}

func (_m *CometRemoteCache) EXPECT() *CometRemoteCache_Expecter {
	return &CometRemoteCache_Expecter{mock: &_m.Mock}
}

// DropRemoteTx provides a mock function with given fields: txHash
func (_m *CometRemoteCache) DropRemoteTx(txHash common.Hash) {
	_m.Called(txHash)
}

// CometRemoteCache_DropRemoteTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropRemoteTx'
type CometRemoteCache_DropRemoteTx_Call struct {
	*mock.Call
}

// DropRemoteTx is a helper method to define mock.On call
//   - txHash common.Hash
func (_e *CometRemoteCache_Expecter) DropRemoteTx(txHash interface{}) *CometRemoteCache_DropRemoteTx_Call {
	return &CometRemoteCache_DropRemoteTx_Call{Call: _e.mock.On("DropRemoteTx", txHash)}
}

func (_c *CometRemoteCache_DropRemoteTx_Call) Run(run func(txHash common.Hash)) *CometRemoteCache_DropRemoteTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash))
	})
	return _c
}

func (_c *CometRemoteCache_DropRemoteTx_Call) Return() *CometRemoteCache_DropRemoteTx_Call {
	_c.Call.Return()
	return _c
}

func (_c *CometRemoteCache_DropRemoteTx_Call) RunAndReturn(run func(common.Hash)) *CometRemoteCache_DropRemoteTx_Call {
	_c.Call.Return(run)
	return _c
}

// IsRemoteTx provides a mock function with given fields: txHash
func (_m *CometRemoteCache) IsRemoteTx(txHash common.Hash) bool {
	ret := _m.Called(txHash)

	if len(ret) == 0 {
		panic("no return value specified for IsRemoteTx")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Hash) bool); ok {
		r0 = rf(txHash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// CometRemoteCache_IsRemoteTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRemoteTx'
type CometRemoteCache_IsRemoteTx_Call struct {
	*mock.Call
}

// IsRemoteTx is a helper method to define mock.On call
//   - txHash common.Hash
func (_e *CometRemoteCache_Expecter) IsRemoteTx(txHash interface{}) *CometRemoteCache_IsRemoteTx_Call {
	return &CometRemoteCache_IsRemoteTx_Call{Call: _e.mock.On("IsRemoteTx", txHash)}
}

func (_c *CometRemoteCache_IsRemoteTx_Call) Run(run func(txHash common.Hash)) *CometRemoteCache_IsRemoteTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash))
	})
	return _c
}

func (_c *CometRemoteCache_IsRemoteTx_Call) Return(_a0 bool) *CometRemoteCache_IsRemoteTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CometRemoteCache_IsRemoteTx_Call) RunAndReturn(run func(common.Hash) bool) *CometRemoteCache_IsRemoteTx_Call {
	_c.Call.Return(run)
	return _c
}

// MarkRemoteSeen provides a mock function with given fields: txHash
func (_m *CometRemoteCache) MarkRemoteSeen(txHash common.Hash) {
	_m.Called(txHash)
}

// CometRemoteCache_MarkRemoteSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkRemoteSeen'
type CometRemoteCache_MarkRemoteSeen_Call struct {
	*mock.Call
}

// MarkRemoteSeen is a helper method to define mock.On call
//   - txHash common.Hash
func (_e *CometRemoteCache_Expecter) MarkRemoteSeen(txHash interface{}) *CometRemoteCache_MarkRemoteSeen_Call {
	return &CometRemoteCache_MarkRemoteSeen_Call{Call: _e.mock.On("MarkRemoteSeen", txHash)}
}

func (_c *CometRemoteCache_MarkRemoteSeen_Call) Run(run func(txHash common.Hash)) *CometRemoteCache_MarkRemoteSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash))
	})
	return _c
}

func (_c *CometRemoteCache_MarkRemoteSeen_Call) Return() *CometRemoteCache_MarkRemoteSeen_Call {
	_c.Call.Return()
	return _c
}

func (_c *CometRemoteCache_MarkRemoteSeen_Call) RunAndReturn(run func(common.Hash)) *CometRemoteCache_MarkRemoteSeen_Call {
	_c.Call.Return(run)
	return _c
}

// TimeFirstSeen provides a mock function with given fields: txHash
func (_m *CometRemoteCache) TimeFirstSeen(txHash common.Hash) int64 {
	ret := _m.Called(txHash)

	if len(ret) == 0 {
		panic("no return value specified for TimeFirstSeen")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(common.Hash) int64); ok {
		r0 = rf(txHash)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// CometRemoteCache_TimeFirstSeen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeFirstSeen'
type CometRemoteCache_TimeFirstSeen_Call struct {
	*mock.Call
}

// TimeFirstSeen is a helper method to define mock.On call
//   - txHash common.Hash
func (_e *CometRemoteCache_Expecter) TimeFirstSeen(txHash interface{}) *CometRemoteCache_TimeFirstSeen_Call {
	return &CometRemoteCache_TimeFirstSeen_Call{Call: _e.mock.On("TimeFirstSeen", txHash)}
}

func (_c *CometRemoteCache_TimeFirstSeen_Call) Run(run func(txHash common.Hash)) *CometRemoteCache_TimeFirstSeen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash))
	})
	return _c
}

func (_c *CometRemoteCache_TimeFirstSeen_Call) Return(_a0 int64) *CometRemoteCache_TimeFirstSeen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CometRemoteCache_TimeFirstSeen_Call) RunAndReturn(run func(common.Hash) int64) *CometRemoteCache_TimeFirstSeen_Call {
	_c.Call.Return(run)
	return _c
}

// NewCometRemoteCache creates a new instance of CometRemoteCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCometRemoteCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *CometRemoteCache {
	mock := &CometRemoteCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
