// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stargazer/core/types/v1/execution_result.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// `ExecutionResult` is the result of the execution.
type ExecutionResult struct {
	// `used_gas` is the gas used during the execution.
	UsedGas uint64 `protobuf:"varint,1,opt,name=used_gas,json=usedGas,proto3" json:"used_gas,omitempty"`
	// `error` is the error message of the execution.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// `return_data` is the return data of the execution.
	ReturnData []byte `protobuf:"bytes,3,opt,name=return_data,json=returnData,proto3" json:"return_data,omitempty"`
	// `logs` is the list of logs emitted during the execution.
	Logs []*Log `protobuf:"bytes,4,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (m *ExecutionResult) Reset()         { *m = ExecutionResult{} }
func (m *ExecutionResult) String() string { return proto.CompactTextString(m) }
func (*ExecutionResult) ProtoMessage()    {}
func (*ExecutionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c7176ae61b85f3c, []int{0}
}
func (m *ExecutionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionResult.Merge(m, src)
}
func (m *ExecutionResult) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionResult.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionResult proto.InternalMessageInfo

func (m *ExecutionResult) GetUsedGas() uint64 {
	if m != nil {
		return m.UsedGas
	}
	return 0
}

func (m *ExecutionResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ExecutionResult) GetReturnData() []byte {
	if m != nil {
		return m.ReturnData
	}
	return nil
}

func (m *ExecutionResult) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func init() {
	proto.RegisterType((*ExecutionResult)(nil), "stargazer.core.types.v1.ExecutionResult")
}

func init() {
	proto.RegisterFile("stargazer/core/types/v1/execution_result.proto", fileDescriptor_0c7176ae61b85f3c)
}

var fileDescriptor_0c7176ae61b85f3c = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xbd, 0x4a, 0xc4, 0x40,
	0x14, 0x85, 0x33, 0x6e, 0xfc, 0x9b, 0x15, 0x84, 0x20, 0x18, 0x45, 0xc6, 0x68, 0x15, 0x9b, 0x19,
	0x57, 0xdf, 0xc0, 0x1f, 0x6c, 0xac, 0x52, 0xda, 0x84, 0x9b, 0xec, 0x65, 0x36, 0x10, 0x33, 0xcb,
	0x9d, 0x99, 0x45, 0x7d, 0x0a, 0x1b, 0xdf, 0xc9, 0x72, 0x4b, 0x4b, 0x49, 0x5e, 0x44, 0x36, 0x41,
	0x2b, 0xb7, 0x3c, 0x97, 0xef, 0x7e, 0x9c, 0xc3, 0xa5, 0x75, 0x40, 0x1a, 0xde, 0x90, 0x54, 0x69,
	0x08, 0x95, 0x7b, 0x9d, 0xa3, 0x55, 0x8b, 0x89, 0xc2, 0x17, 0x2c, 0xbd, 0xab, 0x4c, 0x93, 0x13,
	0x5a, 0x5f, 0x3b, 0x39, 0x27, 0xe3, 0x4c, 0x74, 0xf8, 0xc7, 0xcb, 0x15, 0x2f, 0x7b, 0x5e, 0x2e,
	0x26, 0xc7, 0x67, 0xeb, 0x44, 0xb5, 0xd1, 0xc3, 0xef, 0xf9, 0x07, 0xe3, 0xfb, 0xf7, 0xbf, 0xda,
	0xac, 0xb7, 0x46, 0x47, 0x7c, 0xc7, 0x5b, 0x9c, 0xe6, 0x1a, 0x6c, 0xcc, 0x12, 0x96, 0x86, 0xd9,
	0xf6, 0x2a, 0x3f, 0x80, 0x8d, 0x0e, 0xf8, 0x26, 0x12, 0x19, 0x8a, 0x37, 0x12, 0x96, 0xee, 0x66,
	0x43, 0x88, 0x4e, 0xf9, 0x98, 0xd0, 0x79, 0x6a, 0xf2, 0x29, 0x38, 0x88, 0x47, 0x09, 0x4b, 0xf7,
	0x32, 0x3e, 0x9c, 0xee, 0xc0, 0x41, 0x74, 0xc9, 0xc3, 0xda, 0x68, 0x1b, 0x87, 0xc9, 0x28, 0x1d,
	0x5f, 0x9d, 0xc8, 0x35, 0x85, 0xe5, 0xa3, 0xd1, 0x59, 0x4f, 0xde, 0xdc, 0x7e, 0xb6, 0x82, 0x2d,
	0x5b, 0xc1, 0xbe, 0x5b, 0xc1, 0xde, 0x3b, 0x11, 0x2c, 0x3b, 0x11, 0x7c, 0x75, 0x22, 0x78, 0xba,
	0xd0, 0x95, 0x9b, 0xf9, 0x42, 0x96, 0xe6, 0x59, 0x15, 0x48, 0x50, 0xce, 0xa0, 0x6a, 0xd4, 0x7f,
	0x4b, 0x8b, 0xad, 0x7e, 0xe3, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xe5, 0xf5, 0x46,
	0x51, 0x01, 0x00, 0x00,
}

func (m *ExecutionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExecutionResult(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ReturnData) > 0 {
		i -= len(m.ReturnData)
		copy(dAtA[i:], m.ReturnData)
		i = encodeVarintExecutionResult(dAtA, i, uint64(len(m.ReturnData)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintExecutionResult(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.UsedGas != 0 {
		i = encodeVarintExecutionResult(dAtA, i, uint64(m.UsedGas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintExecutionResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovExecutionResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExecutionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UsedGas != 0 {
		n += 1 + sovExecutionResult(uint64(m.UsedGas))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovExecutionResult(uint64(l))
	}
	l = len(m.ReturnData)
	if l > 0 {
		n += 1 + l + sovExecutionResult(uint64(l))
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovExecutionResult(uint64(l))
		}
	}
	return n
}

func sovExecutionResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExecutionResult(x uint64) (n int) {
	return sovExecutionResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExecutionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExecutionResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedGas", wireType)
			}
			m.UsedGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExecutionResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutionResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthExecutionResult
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthExecutionResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnData = append(m.ReturnData[:0], dAtA[iNdEx:postIndex]...)
			if m.ReturnData == nil {
				m.ReturnData = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExecutionResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExecutionResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExecutionResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExecutionResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExecutionResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExecutionResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExecutionResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutionResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExecutionResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExecutionResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExecutionResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExecutionResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExecutionResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExecutionResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExecutionResult = fmt.Errorf("proto: unexpected end of group")
)
