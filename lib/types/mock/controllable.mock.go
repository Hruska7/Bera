// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"sync"
)

// ControllableMock is a mock implementation of types.Controllable.
//
//	func TestSomethingThatUsesControllable(t *testing.T) {
//
//		// make and configure a mocked types.Controllable
//		mockedControllable := &ControllableMock{
//			RegistryKeyFunc: func() K {
//				panic("mock out the RegistryKey method")
//			},
//			RevertToSnapshotFunc: func(n int)  {
//				panic("mock out the RevertToSnapshot method")
//			},
//			SnapshotFunc: func() int {
//				panic("mock out the Snapshot method")
//			},
//			WriteFunc: func()  {
//				panic("mock out the Write method")
//			},
//		}
//
//		// use mockedControllable in code that requires types.Controllable
//		// and then make assertions.
//
//	}
type ControllableMock[K comparable] struct {
	// RegistryKeyFunc mocks the RegistryKey method.
	RegistryKeyFunc func() K

	// RevertToSnapshotFunc mocks the RevertToSnapshot method.
	RevertToSnapshotFunc func(n int)

	// SnapshotFunc mocks the Snapshot method.
	SnapshotFunc func() int

	// WriteFunc mocks the Write method.
	WriteFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// RegistryKey holds details about calls to the RegistryKey method.
		RegistryKey []struct {
		}
		// RevertToSnapshot holds details about calls to the RevertToSnapshot method.
		RevertToSnapshot []struct {
			// N is the n argument value.
			N int
		}
		// Snapshot holds details about calls to the Snapshot method.
		Snapshot []struct {
		}
		// Write holds details about calls to the Write method.
		Write []struct {
		}
	}
	lockRegistryKey      sync.RWMutex
	lockRevertToSnapshot sync.RWMutex
	lockSnapshot         sync.RWMutex
	lockWrite            sync.RWMutex
}

// RegistryKey calls RegistryKeyFunc.
func (mock *ControllableMock[K]) RegistryKey() K {
	if mock.RegistryKeyFunc == nil {
		panic("ControllableMock.RegistryKeyFunc: method is nil but Controllable.RegistryKey was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRegistryKey.Lock()
	mock.calls.RegistryKey = append(mock.calls.RegistryKey, callInfo)
	mock.lockRegistryKey.Unlock()
	return mock.RegistryKeyFunc()
}

// RegistryKeyCalls gets all the calls that were made to RegistryKey.
// Check the length with:
//
//	len(mockedControllable.RegistryKeyCalls())
func (mock *ControllableMock[K]) RegistryKeyCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRegistryKey.RLock()
	calls = mock.calls.RegistryKey
	mock.lockRegistryKey.RUnlock()
	return calls
}

// RevertToSnapshot calls RevertToSnapshotFunc.
func (mock *ControllableMock[K]) RevertToSnapshot(n int) {
	if mock.RevertToSnapshotFunc == nil {
		panic("ControllableMock.RevertToSnapshotFunc: method is nil but Controllable.RevertToSnapshot was just called")
	}
	callInfo := struct {
		N int
	}{
		N: n,
	}
	mock.lockRevertToSnapshot.Lock()
	mock.calls.RevertToSnapshot = append(mock.calls.RevertToSnapshot, callInfo)
	mock.lockRevertToSnapshot.Unlock()
	mock.RevertToSnapshotFunc(n)
}

// RevertToSnapshotCalls gets all the calls that were made to RevertToSnapshot.
// Check the length with:
//
//	len(mockedControllable.RevertToSnapshotCalls())
func (mock *ControllableMock[K]) RevertToSnapshotCalls() []struct {
	N int
} {
	var calls []struct {
		N int
	}
	mock.lockRevertToSnapshot.RLock()
	calls = mock.calls.RevertToSnapshot
	mock.lockRevertToSnapshot.RUnlock()
	return calls
}

// Snapshot calls SnapshotFunc.
func (mock *ControllableMock[K]) Snapshot() int {
	if mock.SnapshotFunc == nil {
		panic("ControllableMock.SnapshotFunc: method is nil but Controllable.Snapshot was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSnapshot.Lock()
	mock.calls.Snapshot = append(mock.calls.Snapshot, callInfo)
	mock.lockSnapshot.Unlock()
	return mock.SnapshotFunc()
}

// SnapshotCalls gets all the calls that were made to Snapshot.
// Check the length with:
//
//	len(mockedControllable.SnapshotCalls())
func (mock *ControllableMock[K]) SnapshotCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSnapshot.RLock()
	calls = mock.calls.Snapshot
	mock.lockSnapshot.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *ControllableMock[K]) Write() {
	if mock.WriteFunc == nil {
		panic("ControllableMock.WriteFunc: method is nil but Controllable.Write was just called")
	}
	callInfo := struct {
	}{}
	mock.lockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	mock.lockWrite.Unlock()
	mock.WriteFunc()
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedControllable.WriteCalls())
func (mock *ControllableMock[K]) WriteCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockWrite.RLock()
	calls = mock.calls.Write
	mock.lockWrite.RUnlock()
	return calls
}
