// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cosmos

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PolarisERC20MetaData contains all meta data concerning the PolarisERC20 contract.
var PolarisERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_denom\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b50604051620033a1380380620033a183398181016040528101906200003791906200034b565b8060009081620000489190620005e7565b504660808181525050620000616200006f60201b60201c565b60a081815250505062000d08565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000a2620000fd60201b60201c565b805190602001207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc64630604051602001620000e29594939291906200073f565b60405160208183030381529060405280519060200120905090565b60606200010f6200019c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166352a6ea0460006040518263ffffffff1660e01b81526004016200014a91906200083d565b600060405180830381865afa15801562000168573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000193919062000cb7565b60600151905090565b6000734381dc2ab14285160c808659aee005d51255add7905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022182620001d6565b810181811067ffffffffffffffff82111715620002435762000242620001e7565b5b80604052505050565b600062000258620001b8565b905062000266828262000216565b919050565b600067ffffffffffffffff821115620002895762000288620001e7565b5b6200029482620001d6565b9050602081019050919050565b60005b83811015620002c1578082015181840152602081019050620002a4565b60008484015250505050565b6000620002e4620002de846200026b565b6200024c565b905082815260208101848484011115620003035762000302620001d1565b5b62000310848285620002a1565b509392505050565b600082601f83011262000330576200032f620001cc565b5b815162000342848260208601620002cd565b91505092915050565b600060208284031215620003645762000363620001c2565b5b600082015167ffffffffffffffff811115620003855762000384620001c7565b5b620003938482850162000318565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ef57607f821691505b602082108103620004055762000404620003a7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200046f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000430565b6200047b868362000430565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004c8620004c2620004bc8462000493565b6200049d565b62000493565b9050919050565b6000819050919050565b620004e483620004a7565b620004fc620004f382620004cf565b8484546200043d565b825550505050565b600090565b6200051362000504565b62000520818484620004d9565b505050565b5b8181101562000548576200053c60008262000509565b60018101905062000526565b5050565b601f821115620005975762000561816200040b565b6200056c8462000420565b810160208510156200057c578190505b620005946200058b8562000420565b83018262000525565b50505b505050565b600082821c905092915050565b6000620005bc600019846008026200059c565b1980831691505092915050565b6000620005d78383620005a9565b9150826002028217905092915050565b620005f2826200039c565b67ffffffffffffffff8111156200060e576200060d620001e7565b5b6200061a8254620003d6565b620006278282856200054c565b600060209050601f8311600181146200065f57600084156200064a578287015190505b620006568582620005c9565b865550620006c6565b601f1984166200066f866200040b565b60005b82811015620006995784890151825560018201915060208501945060208101905062000672565b86831015620006b95784890151620006b5601f891682620005a9565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b620006e381620006ce565b82525050565b620006f48162000493565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200072782620006fa565b9050919050565b62000739816200071a565b82525050565b600060a082019050620007566000830188620006d8565b620007656020830187620006d8565b620007746040830186620006d8565b620007836060830185620006e9565b6200079260808301846200072e565b9695505050505050565b600082825260208201905092915050565b60008154620007bc81620003d6565b620007c881866200079c565b94506001821660008114620007e65760018114620007fd5762000834565b60ff19831686528115156020028601935062000834565b62000808856200040b565b60005b838110156200082c578154818901526001820191506020810190506200080b565b808801955050505b50505092915050565b60006020820190508181036000830152620008598184620007ad565b905092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115620008895762000888620001e7565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115620008bd57620008bc620001e7565b5b602082029050602081019050919050565b6000620008e5620008df846200089f565b6200024c565b905080838252602082019050602084028301858111156200090b576200090a6200089a565b5b835b818110156200095957805167ffffffffffffffff811115620009345762000933620001cc565b5b80860162000943898262000318565b855260208501945050506020810190506200090d565b5050509392505050565b600082601f8301126200097b576200097a620001cc565b5b81516200098d848260208601620008ce565b91505092915050565b600063ffffffff82169050919050565b620009b18162000996565b8114620009bd57600080fd5b50565b600081519050620009d181620009a6565b92915050565b600060608284031215620009f057620009ef62000861565b5b620009fc60606200024c565b9050600082015167ffffffffffffffff81111562000a1f5762000a1e62000866565b5b62000a2d8482850162000318565b600083015250602082015167ffffffffffffffff81111562000a545762000a5362000866565b5b62000a628482850162000963565b602083015250604062000a7884828501620009c0565b60408301525092915050565b600062000a9b62000a95846200086b565b6200024c565b9050808382526020820190506020840283018581111562000ac15762000ac06200089a565b5b835b8181101562000b0f57805167ffffffffffffffff81111562000aea5762000ae9620001cc565b5b80860162000af98982620009d7565b8552602085019450505060208101905062000ac3565b5050509392505050565b600082601f83011262000b315762000b30620001cc565b5b815162000b4384826020860162000a84565b91505092915050565b600060c0828403121562000b655762000b6462000861565b5b62000b7160c06200024c565b9050600082015167ffffffffffffffff81111562000b945762000b9362000866565b5b62000ba28482850162000318565b600083015250602082015167ffffffffffffffff81111562000bc95762000bc862000866565b5b62000bd78482850162000b19565b602083015250604082015167ffffffffffffffff81111562000bfe5762000bfd62000866565b5b62000c0c8482850162000318565b604083015250606082015167ffffffffffffffff81111562000c335762000c3262000866565b5b62000c418482850162000318565b606083015250608082015167ffffffffffffffff81111562000c685762000c6762000866565b5b62000c768482850162000318565b60808301525060a082015167ffffffffffffffff81111562000c9d5762000c9c62000866565b5b62000cab8482850162000318565b60a08301525092915050565b60006020828403121562000cd05762000ccf620001c2565b5b600082015167ffffffffffffffff81111562000cf15762000cf0620001c7565b5b62000cff8482850162000b4c565b91505092915050565b60805160a05161267362000d2e6000396000610812015260006107de01526126736000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806370a082311161008c578063a9059cbb11610066578063a9059cbb1461022a578063c370b0421461025a578063d505accf14610278578063dd62ed3e14610294576100cf565b806370a08231146101ac5780637ecebe00146101dc57806395d89b411461020c576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce567146101705780633644e5151461018e575b600080fd5b6100dc6102c4565b6040516100e991906112d8565b60405180910390f35b61010c600480360381019061010791906113a2565b610356565b60405161011991906113fd565b60405180910390f35b61012a610498565b6040516101379190611427565b60405180910390f35b61015a60048036038101906101559190611442565b610521565b60405161016791906113fd565b60405180910390f35b610178610729565b60405161018591906114b1565b60405180910390f35b6101966107da565b6040516101a391906114e5565b60405180910390f35b6101c660048036038101906101c19190611500565b610837565b6040516101d39190611427565b60405180910390f35b6101f660048036038101906101f19190611500565b6108c4565b6040516102039190611427565b60405180910390f35b6102146108dc565b60405161022191906112d8565b60405180910390f35b610244600480360381019061023f91906113a2565b61096e565b60405161025191906113fd565b60405180910390f35b610262610aad565b60405161026f91906112d8565b60405180910390f35b610292600480360381019061028d9190611585565b610b3b565b005b6102ae60048036038101906102a99190611627565b610e84565b6040516102bb9190611427565b60405180910390f35b60606102ce610f14565b73ffffffffffffffffffffffffffffffffffffffff166352a6ea0460006040518263ffffffff1660e01b81526004016103079190611760565b600060405180830381865afa158015610324573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061034d9190611c99565b60600151905090565b6000610360610f30565b73ffffffffffffffffffffffffffffffffffffffff16632b6b7ab5338561038686610f4c565b60006040518563ffffffff1660e01b81526004016103a79493929190611e8e565b6020604051808303816000875af11580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea9190611f06565b610429576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042090611fa5565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516104869190611427565b60405180910390a36001905092915050565b60006104a2610f14565b73ffffffffffffffffffffffffffffffffffffffff1663fe3b2b8860006040518263ffffffff1660e01b81526004016104db9190611760565b602060405180830381865afa1580156104f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051c9190611fda565b905090565b600061052b610f30565b73ffffffffffffffffffffffffffffffffffffffff1663fbdb0e87853360006040518463ffffffff1660e01b815260040161056893929190612007565b602060405180830381865afa158015610585573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a99190611fda565b8211156105eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e2906120b7565b60405180910390fd5b6105f3610f14565b73ffffffffffffffffffffffffffffffffffffffff16638440481185856106198661106e565b6040518463ffffffff1660e01b8152600401610637939291906121d6565b6020604051808303816000875af1158015610656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067a9190611f06565b6106b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b090612286565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516107169190611427565b60405180910390a3600190509392505050565b6000610733610f14565b73ffffffffffffffffffffffffffffffffffffffff166352a6ea0460006040518263ffffffff1660e01b815260040161076c9190611760565b600060405180830381865afa158015610789573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107b29190611c99565b602001516000815181106107c9576107c86122a6565b5b602002602001015160400151905090565b60007f000000000000000000000000000000000000000000000000000000000000000046146108105761080b611190565b610832565b7f00000000000000000000000000000000000000000000000000000000000000005b905090565b6000610841610f14565b73ffffffffffffffffffffffffffffffffffffffff166334d1fdaf8360006040518363ffffffff1660e01b815260040161087c9291906122d5565b602060405180830381865afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190611fda565b9050919050565b60016020528060005260406000206000915090505481565b60606108e6610f14565b73ffffffffffffffffffffffffffffffffffffffff166352a6ea0460006040518263ffffffff1660e01b815260040161091f9190611760565b600060405180830381865afa15801561093c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109659190611c99565b60a00151905090565b6000610978610f14565b73ffffffffffffffffffffffffffffffffffffffff166384404811338561099e8661106e565b6040518463ffffffff1660e01b81526004016109bc939291906121d6565b6020604051808303816000875af11580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff9190611f06565b610a3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3590612377565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a9b9190611427565b60405180910390a36001905092915050565b60008054610aba90611696565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae690611696565b8015610b335780601f10610b0857610100808354040283529160200191610b33565b820191906000526020600020905b815481529060010190602001808311610b1657829003601f168201915b505050505081565b42841015610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7590612409565b60405180910390fd5b60006001610b8a6107da565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98a8a8a600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558b604051602001610c1296959493929190612429565b60405160208183030381529060405280519060200120604051602001610c39929190612502565b6040516020818303038152906040528051906020012085858560405160008152602001604052604051610c6f9493929190612539565b6020604051602081039080840390855afa158015610c91573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610d0557508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610d44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3b906125ca565b60405180910390fd5b610d4c610f30565b73ffffffffffffffffffffffffffffffffffffffff16632b6b7ab58289610d728a610f4c565b60006040518563ffffffff1660e01b8152600401610d939493929190611e8e565b6020604051808303816000875af1158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190611f06565b610e15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0c90611fa5565b60405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92587604051610e739190611427565b60405180910390a350505050505050565b6000610e8e610f30565b73ffffffffffffffffffffffffffffffffffffffff1663fbdb0e87848460006040518463ffffffff1660e01b8152600401610ecb93929190612007565b602060405180830381865afa158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c9190611fda565b905092915050565b6000734381dc2ab14285160c808659aee005d51255add7905090565b600073bdf49c3c3882102fc017ffb661108c63a836d065905090565b60606000600167ffffffffffffffff811115610f6b57610f6a611787565b5b604051908082528060200260200182016040528015610fa457816020015b610f91611214565b815260200190600190039081610f895790505b509050604051806040016040528084815260200160008054610fc590611696565b80601f0160208091040260200160405190810160405280929190818152602001828054610ff190611696565b801561103e5780601f106110135761010080835404028352916020019161103e565b820191906000526020600020905b81548152906001019060200180831161102157829003601f168201915b50505050508152508160008151811061105a576110596122a6565b5b602002602001018190525080915050919050565b60606000600167ffffffffffffffff81111561108d5761108c611787565b5b6040519080825280602002602001820160405280156110c657816020015b6110b361122e565b8152602001906001900390816110ab5790505b5090506040518060400160405280848152602001600080546110e790611696565b80601f016020809104026020016040519081016040528092919081815260200182805461111390611696565b80156111605780601f1061113557610100808354040283529160200191611160565b820191906000526020600020905b81548152906001019060200180831161114357829003601f168201915b50505050508152508160008151811061117c5761117b6122a6565b5b602002602001018190525080915050919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6111bb6102c4565b805190602001207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646306040516020016111f99594939291906125ea565b60405160208183030381529060405280519060200120905090565b604051806040016040528060008152602001606081525090565b604051806040016040528060008152602001606081525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015611282578082015181840152602081019050611267565b60008484015250505050565b6000601f19601f8301169050919050565b60006112aa82611248565b6112b48185611253565b93506112c4818560208601611264565b6112cd8161128e565b840191505092915050565b600060208201905081810360008301526112f2818461129f565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113398261130e565b9050919050565b6113498161132e565b811461135457600080fd5b50565b60008135905061136681611340565b92915050565b6000819050919050565b61137f8161136c565b811461138a57600080fd5b50565b60008135905061139c81611376565b92915050565b600080604083850312156113b9576113b8611304565b5b60006113c785828601611357565b92505060206113d88582860161138d565b9150509250929050565b60008115159050919050565b6113f7816113e2565b82525050565b600060208201905061141260008301846113ee565b92915050565b6114218161136c565b82525050565b600060208201905061143c6000830184611418565b92915050565b60008060006060848603121561145b5761145a611304565b5b600061146986828701611357565b935050602061147a86828701611357565b925050604061148b8682870161138d565b9150509250925092565b600060ff82169050919050565b6114ab81611495565b82525050565b60006020820190506114c660008301846114a2565b92915050565b6000819050919050565b6114df816114cc565b82525050565b60006020820190506114fa60008301846114d6565b92915050565b60006020828403121561151657611515611304565b5b600061152484828501611357565b91505092915050565b61153681611495565b811461154157600080fd5b50565b6000813590506115538161152d565b92915050565b611562816114cc565b811461156d57600080fd5b50565b60008135905061157f81611559565b92915050565b600080600080600080600060e0888a0312156115a4576115a3611304565b5b60006115b28a828b01611357565b97505060206115c38a828b01611357565b96505060406115d48a828b0161138d565b95505060606115e58a828b0161138d565b94505060806115f68a828b01611544565b93505060a06116078a828b01611570565b92505060c06116188a828b01611570565b91505092959891949750929550565b6000806040838503121561163e5761163d611304565b5b600061164c85828601611357565b925050602061165d85828601611357565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806116ae57607f821691505b6020821081036116c1576116c0611667565b5b50919050565b60008190508160005260206000209050919050565b600081546116e981611696565b6116f38186611253565b9450600182166000811461170e576001811461172457611757565b60ff198316865281151560200286019350611757565b61172d856116c7565b60005b8381101561174f57815481890152600182019150602081019050611730565b808801955050505b50505092915050565b6000602082019050818103600083015261177a81846116dc565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6117bf8261128e565b810181811067ffffffffffffffff821117156117de576117dd611787565b5b80604052505050565b60006117f16112fa565b90506117fd82826117b6565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561182c5761182b611787565b5b6118358261128e565b9050602081019050919050565b600061185561185084611811565b6117e7565b9050828152602081018484840111156118715761187061180c565b5b61187c848285611264565b509392505050565b600082601f83011261189957611898611807565b5b81516118a9848260208601611842565b91505092915050565b600067ffffffffffffffff8211156118cd576118cc611787565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156118fe576118fd611787565b5b602082029050602081019050919050565b600061192261191d846118e3565b6117e7565b90508083825260208201905060208402830185811115611945576119446118de565b5b835b8181101561198c57805167ffffffffffffffff81111561196a57611969611807565b5b8086016119778982611884565b85526020850194505050602081019050611947565b5050509392505050565b600082601f8301126119ab576119aa611807565b5b81516119bb84826020860161190f565b91505092915050565b600063ffffffff82169050919050565b6119dd816119c4565b81146119e857600080fd5b50565b6000815190506119fa816119d4565b92915050565b600060608284031215611a1657611a15611782565b5b611a2060606117e7565b9050600082015167ffffffffffffffff811115611a4057611a3f611802565b5b611a4c84828501611884565b600083015250602082015167ffffffffffffffff811115611a7057611a6f611802565b5b611a7c84828501611996565b6020830152506040611a90848285016119eb565b60408301525092915050565b6000611aaf611aaa846118b2565b6117e7565b90508083825260208201905060208402830185811115611ad257611ad16118de565b5b835b81811015611b1957805167ffffffffffffffff811115611af757611af6611807565b5b808601611b048982611a00565b85526020850194505050602081019050611ad4565b5050509392505050565b600082601f830112611b3857611b37611807565b5b8151611b48848260208601611a9c565b91505092915050565b600060c08284031215611b6757611b66611782565b5b611b7160c06117e7565b9050600082015167ffffffffffffffff811115611b9157611b90611802565b5b611b9d84828501611884565b600083015250602082015167ffffffffffffffff811115611bc157611bc0611802565b5b611bcd84828501611b23565b602083015250604082015167ffffffffffffffff811115611bf157611bf0611802565b5b611bfd84828501611884565b604083015250606082015167ffffffffffffffff811115611c2157611c20611802565b5b611c2d84828501611884565b606083015250608082015167ffffffffffffffff811115611c5157611c50611802565b5b611c5d84828501611884565b60808301525060a082015167ffffffffffffffff811115611c8157611c80611802565b5b611c8d84828501611884565b60a08301525092915050565b600060208284031215611caf57611cae611304565b5b600082015167ffffffffffffffff811115611ccd57611ccc611309565b5b611cd984828501611b51565b91505092915050565b611ceb8161132e565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611d268161136c565b82525050565b600082825260208201905092915050565b6000611d4882611248565b611d528185611d2c565b9350611d62818560208601611264565b611d6b8161128e565b840191505092915050565b6000604083016000830151611d8e6000860182611d1d565b5060208301518482036020860152611da68282611d3d565b9150508091505092915050565b6000611dbf8383611d76565b905092915050565b6000602082019050919050565b6000611ddf82611cf1565b611de98185611cfc565b935083602082028501611dfb85611d0d565b8060005b85811015611e375784840389528151611e188582611db3565b9450611e2383611dc7565b925060208a01995050600181019050611dff565b50829750879550505050505092915050565b6000819050919050565b6000819050919050565b6000611e78611e73611e6e84611e49565b611e53565b61136c565b9050919050565b611e8881611e5d565b82525050565b6000608082019050611ea36000830187611ce2565b611eb06020830186611ce2565b8181036040830152611ec28185611dd4565b9050611ed16060830184611e7f565b95945050505050565b611ee3816113e2565b8114611eee57600080fd5b50565b600081519050611f0081611eda565b92915050565b600060208284031215611f1c57611f1b611304565b5b6000611f2a84828501611ef1565b91505092915050565b7f506f6c6172697345524332303a206661696c656420746f20617070726f76652060008201527f7370656e64000000000000000000000000000000000000000000000000000000602082015250565b6000611f8f602583611253565b9150611f9a82611f33565b604082019050919050565b60006020820190508181036000830152611fbe81611f82565b9050919050565b600081519050611fd481611376565b92915050565b600060208284031215611ff057611fef611304565b5b6000611ffe84828501611fc5565b91505092915050565b600060608201905061201c6000830186611ce2565b6120296020830185611ce2565b818103604083015261203b81846116dc565b9050949350505050565b7f506f6c6172697345524332303a20696e73756666696369656e7420617070726f60008201527f76616c0000000000000000000000000000000000000000000000000000000000602082015250565b60006120a1602383611253565b91506120ac82612045565b604082019050919050565b600060208201905081810360008301526120d081612094565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060408301600083015161211b6000860182611d1d565b50602083015184820360208601526121338282611d3d565b9150508091505092915050565b600061214c8383612103565b905092915050565b6000602082019050919050565b600061216c826120d7565b61217681856120e2565b935083602082028501612188856120f3565b8060005b858110156121c457848403895281516121a58582612140565b94506121b083612154565b925060208a0199505060018101905061218c565b50829750879550505050505092915050565b60006060820190506121eb6000830186611ce2565b6121f86020830185611ce2565b818103604083015261220a8184612161565b9050949350505050565b7f506f6c6172697345524332303a206661696c656420746f2073656e642062616e60008201527f6b20746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000612270602883611253565b915061227b82612214565b604082019050919050565b6000602082019050818103600083015261229f81612263565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506122ea6000830185611ce2565b81810360208301526122fc81846116dc565b90509392505050565b7f506f6c6172697345524332303a206661696c656420746f2073656e6420746f6b60008201527f656e730000000000000000000000000000000000000000000000000000000000602082015250565b6000612361602383611253565b915061236c82612305565b604082019050919050565b6000602082019050818103600083015261239081612354565b9050919050565b7f506f6c6172697345524332303a205045524d49545f444541444c494e455f455860008201527f5049524544000000000000000000000000000000000000000000000000000000602082015250565b60006123f3602583611253565b91506123fe82612397565b604082019050919050565b60006020820190508181036000830152612422816123e6565b9050919050565b600060c08201905061243e60008301896114d6565b61244b6020830188611ce2565b6124586040830187611ce2565b6124656060830186611418565b6124726080830185611418565b61247f60a0830184611418565b979650505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006124cb60028361248a565b91506124d682612495565b600282019050919050565b6000819050919050565b6124fc6124f7826114cc565b6124e1565b82525050565b600061250d826124be565b915061251982856124eb565b60208201915061252982846124eb565b6020820191508190509392505050565b600060808201905061254e60008301876114d6565b61255b60208301866114a2565b61256860408301856114d6565b61257560608301846114d6565b95945050505050565b7f506f6c6172697345524332303a20494e56414c49445f5349474e455200000000600082015250565b60006125b4601c83611253565b91506125bf8261257e565b602082019050919050565b600060208201905081810360008301526125e3816125a7565b9050919050565b600060a0820190506125ff60008301886114d6565b61260c60208301876114d6565b61261960408301866114d6565b6126266060830185611418565b6126336080830184611ce2565b969550505050505056fea2646970667358221220308a6afa7f6f1ebb7755eeec3048031bd159a12c5b8c87a1886bf89d081628f364736f6c63430008130033",
}

// PolarisERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use PolarisERC20MetaData.ABI instead.
var PolarisERC20ABI = PolarisERC20MetaData.ABI

// PolarisERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PolarisERC20MetaData.Bin instead.
var PolarisERC20Bin = PolarisERC20MetaData.Bin

// DeployPolarisERC20 deploys a new Ethereum contract, binding an instance of PolarisERC20 to it.
func DeployPolarisERC20(auth *bind.TransactOpts, backend bind.ContractBackend, _denom string) (common.Address, *types.Transaction, *PolarisERC20, error) {
	parsed, err := PolarisERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PolarisERC20Bin), backend, _denom)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PolarisERC20{PolarisERC20Caller: PolarisERC20Caller{contract: contract}, PolarisERC20Transactor: PolarisERC20Transactor{contract: contract}, PolarisERC20Filterer: PolarisERC20Filterer{contract: contract}}, nil
}

// PolarisERC20 is an auto generated Go binding around an Ethereum contract.
type PolarisERC20 struct {
	PolarisERC20Caller     // Read-only binding to the contract
	PolarisERC20Transactor // Write-only binding to the contract
	PolarisERC20Filterer   // Log filterer for contract events
}

// PolarisERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type PolarisERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolarisERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type PolarisERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolarisERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PolarisERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolarisERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PolarisERC20Session struct {
	Contract     *PolarisERC20     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PolarisERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PolarisERC20CallerSession struct {
	Contract *PolarisERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// PolarisERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PolarisERC20TransactorSession struct {
	Contract     *PolarisERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// PolarisERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type PolarisERC20Raw struct {
	Contract *PolarisERC20 // Generic contract binding to access the raw methods on
}

// PolarisERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PolarisERC20CallerRaw struct {
	Contract *PolarisERC20Caller // Generic read-only contract binding to access the raw methods on
}

// PolarisERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PolarisERC20TransactorRaw struct {
	Contract *PolarisERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPolarisERC20 creates a new instance of PolarisERC20, bound to a specific deployed contract.
func NewPolarisERC20(address common.Address, backend bind.ContractBackend) (*PolarisERC20, error) {
	contract, err := bindPolarisERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20{PolarisERC20Caller: PolarisERC20Caller{contract: contract}, PolarisERC20Transactor: PolarisERC20Transactor{contract: contract}, PolarisERC20Filterer: PolarisERC20Filterer{contract: contract}}, nil
}

// NewPolarisERC20Caller creates a new read-only instance of PolarisERC20, bound to a specific deployed contract.
func NewPolarisERC20Caller(address common.Address, caller bind.ContractCaller) (*PolarisERC20Caller, error) {
	contract, err := bindPolarisERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20Caller{contract: contract}, nil
}

// NewPolarisERC20Transactor creates a new write-only instance of PolarisERC20, bound to a specific deployed contract.
func NewPolarisERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*PolarisERC20Transactor, error) {
	contract, err := bindPolarisERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20Transactor{contract: contract}, nil
}

// NewPolarisERC20Filterer creates a new log filterer instance of PolarisERC20, bound to a specific deployed contract.
func NewPolarisERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*PolarisERC20Filterer, error) {
	contract, err := bindPolarisERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20Filterer{contract: contract}, nil
}

// bindPolarisERC20 binds a generic wrapper to an already deployed contract.
func bindPolarisERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PolarisERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PolarisERC20 *PolarisERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PolarisERC20.Contract.PolarisERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PolarisERC20 *PolarisERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PolarisERC20.Contract.PolarisERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PolarisERC20 *PolarisERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PolarisERC20.Contract.PolarisERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PolarisERC20 *PolarisERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PolarisERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PolarisERC20 *PolarisERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PolarisERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PolarisERC20 *PolarisERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PolarisERC20.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_PolarisERC20 *PolarisERC20Caller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_PolarisERC20 *PolarisERC20Session) DOMAINSEPARATOR() ([32]byte, error) {
	return _PolarisERC20.Contract.DOMAINSEPARATOR(&_PolarisERC20.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_PolarisERC20 *PolarisERC20CallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _PolarisERC20.Contract.DOMAINSEPARATOR(&_PolarisERC20.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.Allowance(&_PolarisERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_PolarisERC20 *PolarisERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.Allowance(&_PolarisERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Caller) BalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "balanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Session) BalanceOf(user common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.BalanceOf(&_PolarisERC20.CallOpts, user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_PolarisERC20 *PolarisERC20CallerSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.BalanceOf(&_PolarisERC20.CallOpts, user)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PolarisERC20 *PolarisERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PolarisERC20 *PolarisERC20Session) Decimals() (uint8, error) {
	return _PolarisERC20.Contract.Decimals(&_PolarisERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PolarisERC20 *PolarisERC20CallerSession) Decimals() (uint8, error) {
	return _PolarisERC20.Contract.Decimals(&_PolarisERC20.CallOpts)
}

// Denom is a free data retrieval call binding the contract method 0xc370b042.
//
// Solidity: function denom() view returns(string)
func (_PolarisERC20 *PolarisERC20Caller) Denom(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "denom")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Denom is a free data retrieval call binding the contract method 0xc370b042.
//
// Solidity: function denom() view returns(string)
func (_PolarisERC20 *PolarisERC20Session) Denom() (string, error) {
	return _PolarisERC20.Contract.Denom(&_PolarisERC20.CallOpts)
}

// Denom is a free data retrieval call binding the contract method 0xc370b042.
//
// Solidity: function denom() view returns(string)
func (_PolarisERC20 *PolarisERC20CallerSession) Denom() (string, error) {
	return _PolarisERC20.Contract.Denom(&_PolarisERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PolarisERC20 *PolarisERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PolarisERC20 *PolarisERC20Session) Name() (string, error) {
	return _PolarisERC20.Contract.Name(&_PolarisERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PolarisERC20 *PolarisERC20CallerSession) Name() (string, error) {
	return _PolarisERC20.Contract.Name(&_PolarisERC20.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Caller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Session) Nonces(arg0 common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.Nonces(&_PolarisERC20.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PolarisERC20 *PolarisERC20CallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.Nonces(&_PolarisERC20.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PolarisERC20 *PolarisERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PolarisERC20 *PolarisERC20Session) Symbol() (string, error) {
	return _PolarisERC20.Contract.Symbol(&_PolarisERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PolarisERC20 *PolarisERC20CallerSession) Symbol() (string, error) {
	return _PolarisERC20.Contract.Symbol(&_PolarisERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PolarisERC20 *PolarisERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PolarisERC20 *PolarisERC20Session) TotalSupply() (*big.Int, error) {
	return _PolarisERC20.Contract.TotalSupply(&_PolarisERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PolarisERC20 *PolarisERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _PolarisERC20.Contract.TotalSupply(&_PolarisERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Approve(&_PolarisERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Approve(&_PolarisERC20.TransactOpts, spender, amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_PolarisERC20 *PolarisERC20Transactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _PolarisERC20.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_PolarisERC20 *PolarisERC20Session) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Permit(&_PolarisERC20.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_PolarisERC20 *PolarisERC20TransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Permit(&_PolarisERC20.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Transfer(&_PolarisERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Transfer(&_PolarisERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.TransferFrom(&_PolarisERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.TransferFrom(&_PolarisERC20.TransactOpts, from, to, amount)
}

// PolarisERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the PolarisERC20 contract.
type PolarisERC20ApprovalIterator struct {
	Event *PolarisERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolarisERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolarisERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolarisERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolarisERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolarisERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolarisERC20Approval represents a Approval event raised by the PolarisERC20 contract.
type PolarisERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PolarisERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _PolarisERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20ApprovalIterator{contract: _PolarisERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PolarisERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _PolarisERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolarisERC20Approval)
				if err := _PolarisERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) ParseApproval(log types.Log) (*PolarisERC20Approval, error) {
	event := new(PolarisERC20Approval)
	if err := _PolarisERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PolarisERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the PolarisERC20 contract.
type PolarisERC20TransferIterator struct {
	Event *PolarisERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolarisERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolarisERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolarisERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolarisERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolarisERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolarisERC20Transfer represents a Transfer event raised by the PolarisERC20 contract.
type PolarisERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PolarisERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _PolarisERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20TransferIterator{contract: _PolarisERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PolarisERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _PolarisERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolarisERC20Transfer)
				if err := _PolarisERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) ParseTransfer(log types.Log) (*PolarisERC20Transfer, error) {
	event := new(PolarisERC20Transfer)
	if err := _PolarisERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
