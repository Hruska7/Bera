// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package cosmos

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PolarisERC20MetaData contains all meta data concerning the PolarisERC20 contract.
var PolarisERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_denom\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"denom\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b50604051620032863803806200328683398181016040528101906200003791906200034b565b8060009081620000489190620005e7565b504660808181525050620000616200006f60201b60201c565b60a081815250505062000d08565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620000a2620000fd60201b60201c565b805190602001207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc64630604051602001620000e29594939291906200073f565b60405160208183030381529060405280519060200120905090565b60606200010f6200019c60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff166352a6ea0460006040518263ffffffff1660e01b81526004016200014a91906200083d565b600060405180830381865afa15801562000168573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000193919062000cb7565b60600151905090565b6000734381dc2ab14285160c808659aee005d51255add7905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200022182620001d6565b810181811067ffffffffffffffff82111715620002435762000242620001e7565b5b80604052505050565b600062000258620001b8565b905062000266828262000216565b919050565b600067ffffffffffffffff821115620002895762000288620001e7565b5b6200029482620001d6565b9050602081019050919050565b60005b83811015620002c1578082015181840152602081019050620002a4565b60008484015250505050565b6000620002e4620002de846200026b565b6200024c565b905082815260208101848484011115620003035762000302620001d1565b5b62000310848285620002a1565b509392505050565b600082601f83011262000330576200032f620001cc565b5b815162000342848260208601620002cd565b91505092915050565b600060208284031215620003645762000363620001c2565b5b600082015167ffffffffffffffff811115620003855762000384620001c7565b5b620003938482850162000318565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ef57607f821691505b602082108103620004055762000404620003a7565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200046f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000430565b6200047b868362000430565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004c8620004c2620004bc8462000493565b6200049d565b62000493565b9050919050565b6000819050919050565b620004e483620004a7565b620004fc620004f382620004cf565b8484546200043d565b825550505050565b600090565b6200051362000504565b62000520818484620004d9565b505050565b5b8181101562000548576200053c60008262000509565b60018101905062000526565b5050565b601f821115620005975762000561816200040b565b6200056c8462000420565b810160208510156200057c578190505b620005946200058b8562000420565b83018262000525565b50505b505050565b600082821c905092915050565b6000620005bc600019846008026200059c565b1980831691505092915050565b6000620005d78383620005a9565b9150826002028217905092915050565b620005f2826200039c565b67ffffffffffffffff8111156200060e576200060d620001e7565b5b6200061a8254620003d6565b620006278282856200054c565b600060209050601f8311600181146200065f57600084156200064a578287015190505b620006568582620005c9565b865550620006c6565b601f1984166200066f866200040b565b60005b82811015620006995784890151825560018201915060208501945060208101905062000672565b86831015620006b95784890151620006b5601f891682620005a9565b8355505b6001600288020188555050505b505050505050565b6000819050919050565b620006e381620006ce565b82525050565b620006f48162000493565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200072782620006fa565b9050919050565b62000739816200071a565b82525050565b600060a082019050620007566000830188620006d8565b620007656020830187620006d8565b620007746040830186620006d8565b620007836060830185620006e9565b6200079260808301846200072e565b9695505050505050565b600082825260208201905092915050565b60008154620007bc81620003d6565b620007c881866200079c565b94506001821660008114620007e65760018114620007fd5762000834565b60ff19831686528115156020028601935062000834565b62000808856200040b565b60005b838110156200082c578154818901526001820191506020810190506200080b565b808801955050505b50505092915050565b60006020820190508181036000830152620008598184620007ad565b905092915050565b600080fd5b600080fd5b600067ffffffffffffffff821115620008895762000888620001e7565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115620008bd57620008bc620001e7565b5b602082029050602081019050919050565b6000620008e5620008df846200089f565b6200024c565b905080838252602082019050602084028301858111156200090b576200090a6200089a565b5b835b818110156200095957805167ffffffffffffffff811115620009345762000933620001cc565b5b80860162000943898262000318565b855260208501945050506020810190506200090d565b5050509392505050565b600082601f8301126200097b576200097a620001cc565b5b81516200098d848260208601620008ce565b91505092915050565b600063ffffffff82169050919050565b620009b18162000996565b8114620009bd57600080fd5b50565b600081519050620009d181620009a6565b92915050565b600060608284031215620009f057620009ef62000861565b5b620009fc60606200024c565b9050600082015167ffffffffffffffff81111562000a1f5762000a1e62000866565b5b62000a2d8482850162000318565b600083015250602082015167ffffffffffffffff81111562000a545762000a5362000866565b5b62000a628482850162000963565b602083015250604062000a7884828501620009c0565b60408301525092915050565b600062000a9b62000a95846200086b565b6200024c565b9050808382526020820190506020840283018581111562000ac15762000ac06200089a565b5b835b8181101562000b0f57805167ffffffffffffffff81111562000aea5762000ae9620001cc565b5b80860162000af98982620009d7565b8552602085019450505060208101905062000ac3565b5050509392505050565b600082601f83011262000b315762000b30620001cc565b5b815162000b4384826020860162000a84565b91505092915050565b600060c0828403121562000b655762000b6462000861565b5b62000b7160c06200024c565b9050600082015167ffffffffffffffff81111562000b945762000b9362000866565b5b62000ba28482850162000318565b600083015250602082015167ffffffffffffffff81111562000bc95762000bc862000866565b5b62000bd78482850162000b19565b602083015250604082015167ffffffffffffffff81111562000bfe5762000bfd62000866565b5b62000c0c8482850162000318565b604083015250606082015167ffffffffffffffff81111562000c335762000c3262000866565b5b62000c418482850162000318565b606083015250608082015167ffffffffffffffff81111562000c685762000c6762000866565b5b62000c768482850162000318565b60808301525060a082015167ffffffffffffffff81111562000c9d5762000c9c62000866565b5b62000cab8482850162000318565b60a08301525092915050565b60006020828403121562000cd05762000ccf620001c2565b5b600082015167ffffffffffffffff81111562000cf15762000cf0620001c7565b5b62000cff8482850162000b4c565b91505092915050565b60805160a05161255862000d2e60003960006107c70152600061079301526125586000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101915780637ecebe00146101c157806395d89b41146101f1578063a9059cbb1461020f578063c370b0421461023f578063d505accf1461025d576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce567146101555780633644e51514610173575b600080fd5b6100c1610279565b6040516100ce91906111fd565b60405180910390f35b6100f160048036038101906100ec91906112c7565b61030b565b6040516100fe9190611322565b60405180910390f35b61010f61044d565b60405161011c919061134c565b60405180910390f35b61013f600480360381019061013a9190611367565b6104d6565b60405161014c9190611322565b60405180910390f35b61015d6106de565b60405161016a91906113d6565b60405180910390f35b61017b61078f565b604051610188919061140a565b60405180910390f35b6101ab60048036038101906101a69190611425565b6107ec565b6040516101b8919061134c565b60405180910390f35b6101db60048036038101906101d69190611425565b610879565b6040516101e8919061134c565b60405180910390f35b6101f9610891565b60405161020691906111fd565b60405180910390f35b610229600480360381019061022491906112c7565b610923565b6040516102369190611322565b60405180910390f35b610247610a62565b60405161025491906111fd565b60405180910390f35b610277600480360381019061027291906114aa565b610af0565b005b6060610283610e39565b73ffffffffffffffffffffffffffffffffffffffff166352a6ea0460006040518263ffffffff1660e01b81526004016102bc9190611645565b600060405180830381865afa1580156102d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103029190611b7e565b60600151905090565b6000610315610e55565b73ffffffffffffffffffffffffffffffffffffffff16632b6b7ab5338561033b86610e71565b60006040518563ffffffff1660e01b815260040161035c9493929190611d73565b6020604051808303816000875af115801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190611deb565b6103de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d590611e8a565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161043b919061134c565b60405180910390a36001905092915050565b6000610457610e39565b73ffffffffffffffffffffffffffffffffffffffff1663fe3b2b8860006040518263ffffffff1660e01b81526004016104909190611645565b602060405180830381865afa1580156104ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d19190611ebf565b905090565b60006104e0610e55565b73ffffffffffffffffffffffffffffffffffffffff1663fbdb0e87853360006040518463ffffffff1660e01b815260040161051d93929190611eec565b602060405180830381865afa15801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e9190611ebf565b8211156105a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059790611f9c565b60405180910390fd5b6105a8610e39565b73ffffffffffffffffffffffffffffffffffffffff16638440481185856105ce86610f93565b6040518463ffffffff1660e01b81526004016105ec939291906120bb565b6020604051808303816000875af115801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f9190611deb565b61066e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106659061216b565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106cb919061134c565b60405180910390a3600190509392505050565b60006106e8610e39565b73ffffffffffffffffffffffffffffffffffffffff166352a6ea0460006040518263ffffffff1660e01b81526004016107219190611645565b600060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107679190611b7e565b6020015160008151811061077e5761077d61218b565b5b602002602001015160400151905090565b60007f000000000000000000000000000000000000000000000000000000000000000046146107c5576107c06110b5565b6107e7565b7f00000000000000000000000000000000000000000000000000000000000000005b905090565b60006107f6610e39565b73ffffffffffffffffffffffffffffffffffffffff166334d1fdaf8360006040518363ffffffff1660e01b81526004016108319291906121ba565b602060405180830381865afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108729190611ebf565b9050919050565b60016020528060005260406000206000915090505481565b606061089b610e39565b73ffffffffffffffffffffffffffffffffffffffff166352a6ea0460006040518263ffffffff1660e01b81526004016108d49190611645565b600060405180830381865afa1580156108f1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061091a9190611b7e565b60a00151905090565b600061092d610e39565b73ffffffffffffffffffffffffffffffffffffffff166384404811338561095386610f93565b6040518463ffffffff1660e01b8152600401610971939291906120bb565b6020604051808303816000875af1158015610990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b49190611deb565b6109f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ea9061225c565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a50919061134c565b60405180910390a36001905092915050565b60008054610a6f9061157b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a9b9061157b565b8015610ae85780601f10610abd57610100808354040283529160200191610ae8565b820191906000526020600020905b815481529060010190602001808311610acb57829003601f168201915b505050505081565b42841015610b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2a906122ee565b60405180910390fd5b60006001610b3f61078f565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98a8a8a600160008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558b604051602001610bc79695949392919061230e565b60405160208183030381529060405280519060200120604051602001610bee9291906123e7565b6040516020818303038152906040528051906020012085858560405160008152602001604052604051610c24949392919061241e565b6020604051602081039080840390855afa158015610c46573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015610cba57508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf0906124af565b60405180910390fd5b610d01610e55565b73ffffffffffffffffffffffffffffffffffffffff16632b6b7ab58289610d278a610e71565b60006040518563ffffffff1660e01b8152600401610d489493929190611d73565b6020604051808303816000875af1158015610d67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8b9190611deb565b610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc190611e8a565b60405180910390fd5b508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92587604051610e28919061134c565b60405180910390a350505050505050565b6000734381dc2ab14285160c808659aee005d51255add7905090565b600073bdf49c3c3882102fc017ffb661108c63a836d065905090565b60606000600167ffffffffffffffff811115610e9057610e8f61166c565b5b604051908082528060200260200182016040528015610ec957816020015b610eb6611139565b815260200190600190039081610eae5790505b509050604051806040016040528084815260200160008054610eea9061157b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f169061157b565b8015610f635780601f10610f3857610100808354040283529160200191610f63565b820191906000526020600020905b815481529060010190602001808311610f4657829003601f168201915b505050505081525081600081518110610f7f57610f7e61218b565b5b602002602001018190525080915050919050565b60606000600167ffffffffffffffff811115610fb257610fb161166c565b5b604051908082528060200260200182016040528015610feb57816020015b610fd8611153565b815260200190600190039081610fd05790505b50905060405180604001604052808481526020016000805461100c9061157b565b80601f01602080910402602001604051908101604052809291908181526020018280546110389061157b565b80156110855780601f1061105a57610100808354040283529160200191611085565b820191906000526020600020905b81548152906001019060200180831161106857829003601f168201915b5050505050815250816000815181106110a1576110a061218b565b5b602002602001018190525080915050919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6110e0610279565b805190602001207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6463060405160200161111e9594939291906124cf565b60405160208183030381529060405280519060200120905090565b604051806040016040528060008152602001606081525090565b604051806040016040528060008152602001606081525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156111a757808201518184015260208101905061118c565b60008484015250505050565b6000601f19601f8301169050919050565b60006111cf8261116d565b6111d98185611178565b93506111e9818560208601611189565b6111f2816111b3565b840191505092915050565b6000602082019050818103600083015261121781846111c4565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061125e82611233565b9050919050565b61126e81611253565b811461127957600080fd5b50565b60008135905061128b81611265565b92915050565b6000819050919050565b6112a481611291565b81146112af57600080fd5b50565b6000813590506112c18161129b565b92915050565b600080604083850312156112de576112dd611229565b5b60006112ec8582860161127c565b92505060206112fd858286016112b2565b9150509250929050565b60008115159050919050565b61131c81611307565b82525050565b60006020820190506113376000830184611313565b92915050565b61134681611291565b82525050565b6000602082019050611361600083018461133d565b92915050565b6000806000606084860312156113805761137f611229565b5b600061138e8682870161127c565b935050602061139f8682870161127c565b92505060406113b0868287016112b2565b9150509250925092565b600060ff82169050919050565b6113d0816113ba565b82525050565b60006020820190506113eb60008301846113c7565b92915050565b6000819050919050565b611404816113f1565b82525050565b600060208201905061141f60008301846113fb565b92915050565b60006020828403121561143b5761143a611229565b5b60006114498482850161127c565b91505092915050565b61145b816113ba565b811461146657600080fd5b50565b60008135905061147881611452565b92915050565b611487816113f1565b811461149257600080fd5b50565b6000813590506114a48161147e565b92915050565b600080600080600080600060e0888a0312156114c9576114c8611229565b5b60006114d78a828b0161127c565b97505060206114e88a828b0161127c565b96505060406114f98a828b016112b2565b955050606061150a8a828b016112b2565b945050608061151b8a828b01611469565b93505060a061152c8a828b01611495565b92505060c061153d8a828b01611495565b91505092959891949750929550565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061159357607f821691505b6020821081036115a6576115a561154c565b5b50919050565b60008190508160005260206000209050919050565b600081546115ce8161157b565b6115d88186611178565b945060018216600081146115f357600181146116095761163c565b60ff19831686528115156020028601935061163c565b611612856115ac565b60005b8381101561163457815481890152600182019150602081019050611615565b808801955050505b50505092915050565b6000602082019050818103600083015261165f81846115c1565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116a4826111b3565b810181811067ffffffffffffffff821117156116c3576116c261166c565b5b80604052505050565b60006116d661121f565b90506116e2828261169b565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff8211156117115761171061166c565b5b61171a826111b3565b9050602081019050919050565b600061173a611735846116f6565b6116cc565b905082815260208101848484011115611756576117556116f1565b5b611761848285611189565b509392505050565b600082601f83011261177e5761177d6116ec565b5b815161178e848260208601611727565b91505092915050565b600067ffffffffffffffff8211156117b2576117b161166c565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156117e3576117e261166c565b5b602082029050602081019050919050565b6000611807611802846117c8565b6116cc565b9050808382526020820190506020840283018581111561182a576118296117c3565b5b835b8181101561187157805167ffffffffffffffff81111561184f5761184e6116ec565b5b80860161185c8982611769565b8552602085019450505060208101905061182c565b5050509392505050565b600082601f8301126118905761188f6116ec565b5b81516118a08482602086016117f4565b91505092915050565b600063ffffffff82169050919050565b6118c2816118a9565b81146118cd57600080fd5b50565b6000815190506118df816118b9565b92915050565b6000606082840312156118fb576118fa611667565b5b61190560606116cc565b9050600082015167ffffffffffffffff811115611925576119246116e7565b5b61193184828501611769565b600083015250602082015167ffffffffffffffff811115611955576119546116e7565b5b6119618482850161187b565b6020830152506040611975848285016118d0565b60408301525092915050565b600061199461198f84611797565b6116cc565b905080838252602082019050602084028301858111156119b7576119b66117c3565b5b835b818110156119fe57805167ffffffffffffffff8111156119dc576119db6116ec565b5b8086016119e989826118e5565b855260208501945050506020810190506119b9565b5050509392505050565b600082601f830112611a1d57611a1c6116ec565b5b8151611a2d848260208601611981565b91505092915050565b600060c08284031215611a4c57611a4b611667565b5b611a5660c06116cc565b9050600082015167ffffffffffffffff811115611a7657611a756116e7565b5b611a8284828501611769565b600083015250602082015167ffffffffffffffff811115611aa657611aa56116e7565b5b611ab284828501611a08565b602083015250604082015167ffffffffffffffff811115611ad657611ad56116e7565b5b611ae284828501611769565b604083015250606082015167ffffffffffffffff811115611b0657611b056116e7565b5b611b1284828501611769565b606083015250608082015167ffffffffffffffff811115611b3657611b356116e7565b5b611b4284828501611769565b60808301525060a082015167ffffffffffffffff811115611b6657611b656116e7565b5b611b7284828501611769565b60a08301525092915050565b600060208284031215611b9457611b93611229565b5b600082015167ffffffffffffffff811115611bb257611bb161122e565b5b611bbe84828501611a36565b91505092915050565b611bd081611253565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611c0b81611291565b82525050565b600082825260208201905092915050565b6000611c2d8261116d565b611c378185611c11565b9350611c47818560208601611189565b611c50816111b3565b840191505092915050565b6000604083016000830151611c736000860182611c02565b5060208301518482036020860152611c8b8282611c22565b9150508091505092915050565b6000611ca48383611c5b565b905092915050565b6000602082019050919050565b6000611cc482611bd6565b611cce8185611be1565b935083602082028501611ce085611bf2565b8060005b85811015611d1c5784840389528151611cfd8582611c98565b9450611d0883611cac565b925060208a01995050600181019050611ce4565b50829750879550505050505092915050565b6000819050919050565b6000819050919050565b6000611d5d611d58611d5384611d2e565b611d38565b611291565b9050919050565b611d6d81611d42565b82525050565b6000608082019050611d886000830187611bc7565b611d956020830186611bc7565b8181036040830152611da78185611cb9565b9050611db66060830184611d64565b95945050505050565b611dc881611307565b8114611dd357600080fd5b50565b600081519050611de581611dbf565b92915050565b600060208284031215611e0157611e00611229565b5b6000611e0f84828501611dd6565b91505092915050565b7f506f6c6172697345524332303a206661696c656420746f20617070726f76652060008201527f7370656e64000000000000000000000000000000000000000000000000000000602082015250565b6000611e74602583611178565b9150611e7f82611e18565b604082019050919050565b60006020820190508181036000830152611ea381611e67565b9050919050565b600081519050611eb98161129b565b92915050565b600060208284031215611ed557611ed4611229565b5b6000611ee384828501611eaa565b91505092915050565b6000606082019050611f016000830186611bc7565b611f0e6020830185611bc7565b8181036040830152611f2081846115c1565b9050949350505050565b7f506f6c6172697345524332303a20696e73756666696369656e7420617070726f60008201527f76616c0000000000000000000000000000000000000000000000000000000000602082015250565b6000611f86602383611178565b9150611f9182611f2a565b604082019050919050565b60006020820190508181036000830152611fb581611f79565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006040830160008301516120006000860182611c02565b50602083015184820360208601526120188282611c22565b9150508091505092915050565b60006120318383611fe8565b905092915050565b6000602082019050919050565b600061205182611fbc565b61205b8185611fc7565b93508360208202850161206d85611fd8565b8060005b858110156120a9578484038952815161208a8582612025565b945061209583612039565b925060208a01995050600181019050612071565b50829750879550505050505092915050565b60006060820190506120d06000830186611bc7565b6120dd6020830185611bc7565b81810360408301526120ef8184612046565b9050949350505050565b7f506f6c6172697345524332303a206661696c656420746f2073656e642062616e60008201527f6b20746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000612155602883611178565b9150612160826120f9565b604082019050919050565b6000602082019050818103600083015261218481612148565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506121cf6000830185611bc7565b81810360208301526121e181846115c1565b90509392505050565b7f506f6c6172697345524332303a206661696c656420746f2073656e6420746f6b60008201527f656e730000000000000000000000000000000000000000000000000000000000602082015250565b6000612246602383611178565b9150612251826121ea565b604082019050919050565b6000602082019050818103600083015261227581612239565b9050919050565b7f506f6c6172697345524332303a205045524d49545f444541444c494e455f455860008201527f5049524544000000000000000000000000000000000000000000000000000000602082015250565b60006122d8602583611178565b91506122e38261227c565b604082019050919050565b60006020820190508181036000830152612307816122cb565b9050919050565b600060c08201905061232360008301896113fb565b6123306020830188611bc7565b61233d6040830187611bc7565b61234a606083018661133d565b612357608083018561133d565b61236460a083018461133d565b979650505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006123b060028361236f565b91506123bb8261237a565b600282019050919050565b6000819050919050565b6123e16123dc826113f1565b6123c6565b82525050565b60006123f2826123a3565b91506123fe82856123d0565b60208201915061240e82846123d0565b6020820191508190509392505050565b600060808201905061243360008301876113fb565b61244060208301866113c7565b61244d60408301856113fb565b61245a60608301846113fb565b95945050505050565b7f506f6c6172697345524332303a20494e56414c49445f5349474e455200000000600082015250565b6000612499601c83611178565b91506124a482612463565b602082019050919050565b600060208201905081810360008301526124c88161248c565b9050919050565b600060a0820190506124e460008301886113fb565b6124f160208301876113fb565b6124fe60408301866113fb565b61250b606083018561133d565b6125186080830184611bc7565b969550505050505056fea264697066735822122041730f6072ab626bfdcabb92ff62050586a31cc970c6edc10eac0ccc7725c8fd64736f6c63430008130033",
}

// PolarisERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use PolarisERC20MetaData.ABI instead.
var PolarisERC20ABI = PolarisERC20MetaData.ABI

// PolarisERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PolarisERC20MetaData.Bin instead.
var PolarisERC20Bin = PolarisERC20MetaData.Bin

// DeployPolarisERC20 deploys a new Ethereum contract, binding an instance of PolarisERC20 to it.
func DeployPolarisERC20(auth *bind.TransactOpts, backend bind.ContractBackend, _denom string) (common.Address, *types.Transaction, *PolarisERC20, error) {
	parsed, err := PolarisERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PolarisERC20Bin), backend, _denom)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PolarisERC20{PolarisERC20Caller: PolarisERC20Caller{contract: contract}, PolarisERC20Transactor: PolarisERC20Transactor{contract: contract}, PolarisERC20Filterer: PolarisERC20Filterer{contract: contract}}, nil
}

// PolarisERC20 is an auto generated Go binding around an Ethereum contract.
type PolarisERC20 struct {
	PolarisERC20Caller     // Read-only binding to the contract
	PolarisERC20Transactor // Write-only binding to the contract
	PolarisERC20Filterer   // Log filterer for contract events
}

// PolarisERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type PolarisERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolarisERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type PolarisERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolarisERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PolarisERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PolarisERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PolarisERC20Session struct {
	Contract     *PolarisERC20     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PolarisERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PolarisERC20CallerSession struct {
	Contract *PolarisERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// PolarisERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PolarisERC20TransactorSession struct {
	Contract     *PolarisERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// PolarisERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type PolarisERC20Raw struct {
	Contract *PolarisERC20 // Generic contract binding to access the raw methods on
}

// PolarisERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PolarisERC20CallerRaw struct {
	Contract *PolarisERC20Caller // Generic read-only contract binding to access the raw methods on
}

// PolarisERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PolarisERC20TransactorRaw struct {
	Contract *PolarisERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewPolarisERC20 creates a new instance of PolarisERC20, bound to a specific deployed contract.
func NewPolarisERC20(address common.Address, backend bind.ContractBackend) (*PolarisERC20, error) {
	contract, err := bindPolarisERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20{PolarisERC20Caller: PolarisERC20Caller{contract: contract}, PolarisERC20Transactor: PolarisERC20Transactor{contract: contract}, PolarisERC20Filterer: PolarisERC20Filterer{contract: contract}}, nil
}

// NewPolarisERC20Caller creates a new read-only instance of PolarisERC20, bound to a specific deployed contract.
func NewPolarisERC20Caller(address common.Address, caller bind.ContractCaller) (*PolarisERC20Caller, error) {
	contract, err := bindPolarisERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20Caller{contract: contract}, nil
}

// NewPolarisERC20Transactor creates a new write-only instance of PolarisERC20, bound to a specific deployed contract.
func NewPolarisERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*PolarisERC20Transactor, error) {
	contract, err := bindPolarisERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20Transactor{contract: contract}, nil
}

// NewPolarisERC20Filterer creates a new log filterer instance of PolarisERC20, bound to a specific deployed contract.
func NewPolarisERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*PolarisERC20Filterer, error) {
	contract, err := bindPolarisERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20Filterer{contract: contract}, nil
}

// bindPolarisERC20 binds a generic wrapper to an already deployed contract.
func bindPolarisERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PolarisERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PolarisERC20 *PolarisERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PolarisERC20.Contract.PolarisERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PolarisERC20 *PolarisERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PolarisERC20.Contract.PolarisERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PolarisERC20 *PolarisERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PolarisERC20.Contract.PolarisERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PolarisERC20 *PolarisERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PolarisERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PolarisERC20 *PolarisERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PolarisERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PolarisERC20 *PolarisERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PolarisERC20.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_PolarisERC20 *PolarisERC20Caller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_PolarisERC20 *PolarisERC20Session) DOMAINSEPARATOR() ([32]byte, error) {
	return _PolarisERC20.Contract.DOMAINSEPARATOR(&_PolarisERC20.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_PolarisERC20 *PolarisERC20CallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _PolarisERC20.Contract.DOMAINSEPARATOR(&_PolarisERC20.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Caller) BalanceOf(opts *bind.CallOpts, user common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "balanceOf", user)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Session) BalanceOf(user common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.BalanceOf(&_PolarisERC20.CallOpts, user)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address user) view returns(uint256)
func (_PolarisERC20 *PolarisERC20CallerSession) BalanceOf(user common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.BalanceOf(&_PolarisERC20.CallOpts, user)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PolarisERC20 *PolarisERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PolarisERC20 *PolarisERC20Session) Decimals() (uint8, error) {
	return _PolarisERC20.Contract.Decimals(&_PolarisERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_PolarisERC20 *PolarisERC20CallerSession) Decimals() (uint8, error) {
	return _PolarisERC20.Contract.Decimals(&_PolarisERC20.CallOpts)
}

// Denom is a free data retrieval call binding the contract method 0xc370b042.
//
// Solidity: function denom() view returns(string)
func (_PolarisERC20 *PolarisERC20Caller) Denom(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "denom")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Denom is a free data retrieval call binding the contract method 0xc370b042.
//
// Solidity: function denom() view returns(string)
func (_PolarisERC20 *PolarisERC20Session) Denom() (string, error) {
	return _PolarisERC20.Contract.Denom(&_PolarisERC20.CallOpts)
}

// Denom is a free data retrieval call binding the contract method 0xc370b042.
//
// Solidity: function denom() view returns(string)
func (_PolarisERC20 *PolarisERC20CallerSession) Denom() (string, error) {
	return _PolarisERC20.Contract.Denom(&_PolarisERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PolarisERC20 *PolarisERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PolarisERC20 *PolarisERC20Session) Name() (string, error) {
	return _PolarisERC20.Contract.Name(&_PolarisERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_PolarisERC20 *PolarisERC20CallerSession) Name() (string, error) {
	return _PolarisERC20.Contract.Name(&_PolarisERC20.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Caller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PolarisERC20 *PolarisERC20Session) Nonces(arg0 common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.Nonces(&_PolarisERC20.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_PolarisERC20 *PolarisERC20CallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _PolarisERC20.Contract.Nonces(&_PolarisERC20.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PolarisERC20 *PolarisERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PolarisERC20 *PolarisERC20Session) Symbol() (string, error) {
	return _PolarisERC20.Contract.Symbol(&_PolarisERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_PolarisERC20 *PolarisERC20CallerSession) Symbol() (string, error) {
	return _PolarisERC20.Contract.Symbol(&_PolarisERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PolarisERC20 *PolarisERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _PolarisERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PolarisERC20 *PolarisERC20Session) TotalSupply() (*big.Int, error) {
	return _PolarisERC20.Contract.TotalSupply(&_PolarisERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_PolarisERC20 *PolarisERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _PolarisERC20.Contract.TotalSupply(&_PolarisERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Approve(&_PolarisERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Approve(&_PolarisERC20.TransactOpts, spender, amount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_PolarisERC20 *PolarisERC20Transactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _PolarisERC20.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_PolarisERC20 *PolarisERC20Session) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Permit(&_PolarisERC20.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_PolarisERC20 *PolarisERC20TransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Permit(&_PolarisERC20.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Transfer(&_PolarisERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.Transfer(&_PolarisERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.TransferFrom(&_PolarisERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_PolarisERC20 *PolarisERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _PolarisERC20.Contract.TransferFrom(&_PolarisERC20.TransactOpts, from, to, amount)
}

// PolarisERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the PolarisERC20 contract.
type PolarisERC20ApprovalIterator struct {
	Event *PolarisERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolarisERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolarisERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolarisERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolarisERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolarisERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolarisERC20Approval represents a Approval event raised by the PolarisERC20 contract.
type PolarisERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*PolarisERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _PolarisERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20ApprovalIterator{contract: _PolarisERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *PolarisERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _PolarisERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolarisERC20Approval)
				if err := _PolarisERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) ParseApproval(log types.Log) (*PolarisERC20Approval, error) {
	event := new(PolarisERC20Approval)
	if err := _PolarisERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PolarisERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the PolarisERC20 contract.
type PolarisERC20TransferIterator struct {
	Event *PolarisERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PolarisERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PolarisERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PolarisERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PolarisERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PolarisERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PolarisERC20Transfer represents a Transfer event raised by the PolarisERC20 contract.
type PolarisERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*PolarisERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _PolarisERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &PolarisERC20TransferIterator{contract: _PolarisERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *PolarisERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _PolarisERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PolarisERC20Transfer)
				if err := _PolarisERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_PolarisERC20 *PolarisERC20Filterer) ParseTransfer(log types.Log) (*PolarisERC20Transfer, error) {
	event := new(PolarisERC20Transfer)
	if err := _PolarisERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
