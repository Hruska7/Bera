// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ethereum/go-ethereum/core/types"
	"pkg.berachain.dev/polaris/eth/polar"
	"sync"
)

// Ensure, that MinerMock does implement polar.Miner.
// If this is not the case, regenerate this file with moq.
var _ polar.Miner = &MinerMock{}

// MinerMock is a mock implementation of polar.Miner.
//
//	func TestSomethingThatUsesMiner(t *testing.T) {
//
//		// make and configure a mocked polar.Miner
//		mockedMiner := &MinerMock{
//			PendingBlockFunc: func() *types.Block {
//				panic("mock out the PendingBlock method")
//			},
//		}
//
//		// use mockedMiner in code that requires polar.Miner
//		// and then make assertions.
//
//	}
type MinerMock struct {
	// PendingBlockFunc mocks the PendingBlock method.
	PendingBlockFunc func() *types.Block

	// calls tracks calls to the methods.
	calls struct {
		// PendingBlock holds details about calls to the PendingBlock method.
		PendingBlock []struct {
		}
	}
	lockPendingBlock sync.RWMutex
}

// PendingBlock calls PendingBlockFunc.
func (mock *MinerMock) PendingBlock() *types.Block {
	if mock.PendingBlockFunc == nil {
		panic("MinerMock.PendingBlockFunc: method is nil but Miner.PendingBlock was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPendingBlock.Lock()
	mock.calls.PendingBlock = append(mock.calls.PendingBlock, callInfo)
	mock.lockPendingBlock.Unlock()
	return mock.PendingBlockFunc()
}

// PendingBlockCalls gets all the calls that were made to PendingBlock.
// Check the length with:
//
//	len(mockedMiner.PendingBlockCalls())
func (mock *MinerMock) PendingBlockCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPendingBlock.RLock()
	calls = mock.calls.PendingBlock
	mock.lockPendingBlock.RUnlock()
	return calls
}
