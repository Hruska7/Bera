// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/berachain/stargazer/eth/core"
	"github.com/berachain/stargazer/eth/core/types"
	"sync"
)

// Ensure, that StargazerHostChainMock does implement core.StargazerHostChain.
// If this is not the case, regenerate this file with moq.
var _ core.StargazerHostChain = &StargazerHostChainMock{}

// StargazerHostChainMock is a mock implementation of core.StargazerHostChain.
//
//	func TestSomethingThatUsesStargazerHostChain(t *testing.T) {
//
//		// make and configure a mocked core.StargazerHostChain
//		mockedStargazerHostChain := &StargazerHostChainMock{
//			CumulativeGasUsedFunc: func(contextMoqParam context.Context) uint64 {
//				panic("mock out the CumulativeGasUsed method")
//			},
//			StargazerHeaderAtHeightFunc: func(contextMoqParam context.Context, v uint64) *types.StargazerHeader {
//				panic("mock out the StargazerHeaderAtHeight method")
//			},
//		}
//
//		// use mockedStargazerHostChain in code that requires core.StargazerHostChain
//		// and then make assertions.
//
//	}
type StargazerHostChainMock struct {
	// CumulativeGasUsedFunc mocks the CumulativeGasUsed method.
	CumulativeGasUsedFunc func(contextMoqParam context.Context) uint64

	// StargazerHeaderAtHeightFunc mocks the StargazerHeaderAtHeight method.
	StargazerHeaderAtHeightFunc func(contextMoqParam context.Context, v uint64) *types.StargazerHeader

	// calls tracks calls to the methods.
	calls struct {
		// CumulativeGasUsed holds details about calls to the CumulativeGasUsed method.
		CumulativeGasUsed []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// StargazerHeaderAtHeight holds details about calls to the StargazerHeaderAtHeight method.
		StargazerHeaderAtHeight []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// V is the v argument value.
			V uint64
		}
	}
	lockCumulativeGasUsed       sync.RWMutex
	lockStargazerHeaderAtHeight sync.RWMutex
}

// CumulativeGasUsed calls CumulativeGasUsedFunc.
func (mock *StargazerHostChainMock) CumulativeGasUsed(contextMoqParam context.Context) uint64 {
	if mock.CumulativeGasUsedFunc == nil {
		panic("StargazerHostChainMock.CumulativeGasUsedFunc: method is nil but StargazerHostChain.CumulativeGasUsed was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockCumulativeGasUsed.Lock()
	mock.calls.CumulativeGasUsed = append(mock.calls.CumulativeGasUsed, callInfo)
	mock.lockCumulativeGasUsed.Unlock()
	return mock.CumulativeGasUsedFunc(contextMoqParam)
}

// CumulativeGasUsedCalls gets all the calls that were made to CumulativeGasUsed.
// Check the length with:
//
//	len(mockedStargazerHostChain.CumulativeGasUsedCalls())
func (mock *StargazerHostChainMock) CumulativeGasUsedCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockCumulativeGasUsed.RLock()
	calls = mock.calls.CumulativeGasUsed
	mock.lockCumulativeGasUsed.RUnlock()
	return calls
}

// StargazerHeaderAtHeight calls StargazerHeaderAtHeightFunc.
func (mock *StargazerHostChainMock) StargazerHeaderAtHeight(contextMoqParam context.Context, v uint64) *types.StargazerHeader {
	if mock.StargazerHeaderAtHeightFunc == nil {
		panic("StargazerHostChainMock.StargazerHeaderAtHeightFunc: method is nil but StargazerHostChain.StargazerHeaderAtHeight was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		V               uint64
	}{
		ContextMoqParam: contextMoqParam,
		V:               v,
	}
	mock.lockStargazerHeaderAtHeight.Lock()
	mock.calls.StargazerHeaderAtHeight = append(mock.calls.StargazerHeaderAtHeight, callInfo)
	mock.lockStargazerHeaderAtHeight.Unlock()
	return mock.StargazerHeaderAtHeightFunc(contextMoqParam, v)
}

// StargazerHeaderAtHeightCalls gets all the calls that were made to StargazerHeaderAtHeight.
// Check the length with:
//
//	len(mockedStargazerHostChain.StargazerHeaderAtHeightCalls())
func (mock *StargazerHostChainMock) StargazerHeaderAtHeightCalls() []struct {
	ContextMoqParam context.Context
	V               uint64
} {
	var calls []struct {
		ContextMoqParam context.Context
		V               uint64
	}
	mock.lockStargazerHeaderAtHeight.RLock()
	calls = mock.calls.StargazerHeaderAtHeight
	mock.lockStargazerHeaderAtHeight.RUnlock()
	return calls
}
