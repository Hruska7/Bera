// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/berachain/stargazer/eth/core"
	"github.com/berachain/stargazer/eth/core/types"
	"sync"
)

// Ensure, that BlockPluginMock does implement core.BlockPlugin.
// If this is not the case, regenerate this file with moq.
var _ core.BlockPlugin = &BlockPluginMock{}

// BlockPluginMock is a mock implementation of core.BlockPlugin.
//
//	func TestSomethingThatUsesBlockPlugin(t *testing.T) {
//
//		// make and configure a mocked core.BlockPlugin
//		mockedBlockPlugin := &BlockPluginMock{
//			BaseFeeFunc: func() uint64 {
//				panic("mock out the BaseFee method")
//			},
//			GetStargazerHeaderAtHeightFunc: func(n int64) *types.StargazerHeader {
//				panic("mock out the GetStargazerHeaderAtHeight method")
//			},
//			PrepareFunc: func(contextMoqParam context.Context)  {
//				panic("mock out the Prepare method")
//			},
//		}
//
//		// use mockedBlockPlugin in code that requires core.BlockPlugin
//		// and then make assertions.
//
//	}
type BlockPluginMock struct {
	// BaseFeeFunc mocks the BaseFee method.
	BaseFeeFunc func() uint64

	// GetStargazerHeaderAtHeightFunc mocks the GetStargazerHeaderAtHeight method.
	GetStargazerHeaderAtHeightFunc func(n int64) *types.StargazerHeader

	// PrepareFunc mocks the Prepare method.
	PrepareFunc func(contextMoqParam context.Context)

	// calls tracks calls to the methods.
	calls struct {
		// BaseFee holds details about calls to the BaseFee method.
		BaseFee []struct {
		}
		// GetStargazerHeaderAtHeight holds details about calls to the GetStargazerHeaderAtHeight method.
		GetStargazerHeaderAtHeight []struct {
			// N is the n argument value.
			N int64
		}
		// Prepare holds details about calls to the Prepare method.
		Prepare []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockBaseFee                    sync.RWMutex
	lockGetStargazerHeaderAtHeight sync.RWMutex
	lockPrepare                    sync.RWMutex
}

// BaseFee calls BaseFeeFunc.
func (mock *BlockPluginMock) BaseFee() uint64 {
	if mock.BaseFeeFunc == nil {
		panic("BlockPluginMock.BaseFeeFunc: method is nil but BlockPlugin.BaseFee was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBaseFee.Lock()
	mock.calls.BaseFee = append(mock.calls.BaseFee, callInfo)
	mock.lockBaseFee.Unlock()
	return mock.BaseFeeFunc()
}

// BaseFeeCalls gets all the calls that were made to BaseFee.
// Check the length with:
//
//	len(mockedBlockPlugin.BaseFeeCalls())
func (mock *BlockPluginMock) BaseFeeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBaseFee.RLock()
	calls = mock.calls.BaseFee
	mock.lockBaseFee.RUnlock()
	return calls
}

// GetStargazerHeaderAtHeight calls GetStargazerHeaderAtHeightFunc.
func (mock *BlockPluginMock) GetStargazerHeaderAtHeight(n int64) *types.StargazerHeader {
	if mock.GetStargazerHeaderAtHeightFunc == nil {
		panic("BlockPluginMock.GetStargazerHeaderAtHeightFunc: method is nil but BlockPlugin.GetStargazerHeaderAtHeight was just called")
	}
	callInfo := struct {
		N int64
	}{
		N: n,
	}
	mock.lockGetStargazerHeaderAtHeight.Lock()
	mock.calls.GetStargazerHeaderAtHeight = append(mock.calls.GetStargazerHeaderAtHeight, callInfo)
	mock.lockGetStargazerHeaderAtHeight.Unlock()
	return mock.GetStargazerHeaderAtHeightFunc(n)
}

// GetStargazerHeaderAtHeightCalls gets all the calls that were made to GetStargazerHeaderAtHeight.
// Check the length with:
//
//	len(mockedBlockPlugin.GetStargazerHeaderAtHeightCalls())
func (mock *BlockPluginMock) GetStargazerHeaderAtHeightCalls() []struct {
	N int64
} {
	var calls []struct {
		N int64
	}
	mock.lockGetStargazerHeaderAtHeight.RLock()
	calls = mock.calls.GetStargazerHeaderAtHeight
	mock.lockGetStargazerHeaderAtHeight.RUnlock()
	return calls
}

// Prepare calls PrepareFunc.
func (mock *BlockPluginMock) Prepare(contextMoqParam context.Context) {
	if mock.PrepareFunc == nil {
		panic("BlockPluginMock.PrepareFunc: method is nil but BlockPlugin.Prepare was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockPrepare.Lock()
	mock.calls.Prepare = append(mock.calls.Prepare, callInfo)
	mock.lockPrepare.Unlock()
	mock.PrepareFunc(contextMoqParam)
}

// PrepareCalls gets all the calls that were made to Prepare.
// Check the length with:
//
//	len(mockedBlockPlugin.PrepareCalls())
func (mock *BlockPluginMock) PrepareCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockPrepare.RLock()
	calls = mock.calls.Prepare
	mock.lockPrepare.RUnlock()
	return calls
}
