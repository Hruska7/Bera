// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	context "context"
	big "math/big"

	common "github.com/ethereum/go-ethereum/common"

	corestate "github.com/ethereum/go-ethereum/core/state"

	mock "github.com/stretchr/testify/mock"

	params "github.com/ethereum/go-ethereum/params"

	types "github.com/ethereum/go-ethereum/core/types"
)

// StateDB is an autogenerated mock type for the StateDB type.
type StateDB struct {
	mock.Mock
}

type StateDB_Expecter struct {
	mock *mock.Mock
}

func (_m *StateDB) EXPECT() *StateDB_Expecter {
	return &StateDB_Expecter{mock: &_m.Mock}
}

// AddAddressToAccessList provides a mock function with given fields: addr.
func (_m *StateDB) AddAddressToAccessList(addr common.Address) {
	_m.Called(addr)
}

// StateDB_AddAddressToAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAddressToAccessList'.
type StateDB_AddAddressToAccessList_Call struct {
	*mock.Call
}

// AddAddressToAccessList is a helper method to define mock.On call
//   - addr common.Address
func (_e *StateDB_Expecter) AddAddressToAccessList(addr interface{}) *StateDB_AddAddressToAccessList_Call {
	return &StateDB_AddAddressToAccessList_Call{Call: _e.mock.On("AddAddressToAccessList", addr)}
}

func (_c *StateDB_AddAddressToAccessList_Call) Run(run func(addr common.Address)) *StateDB_AddAddressToAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_AddAddressToAccessList_Call) Return() *StateDB_AddAddressToAccessList_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_AddAddressToAccessList_Call) RunAndReturn(run func(common.Address)) *StateDB_AddAddressToAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// AddBalance provides a mock function with given fields: _a0, _a1.
func (_m *StateDB) AddBalance(_a0 common.Address, _a1 *big.Int) {
	_m.Called(_a0, _a1)
}

// StateDB_AddBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBalance'.
type StateDB_AddBalance_Call struct {
	*mock.Call
}

// AddBalance is a helper method to define mock.On call
//   - _a0 common.Address
//   - _a1 *big.Int
func (_e *StateDB_Expecter) AddBalance(_a0 interface{}, _a1 interface{}) *StateDB_AddBalance_Call {
	return &StateDB_AddBalance_Call{Call: _e.mock.On("AddBalance", _a0, _a1)}
}

func (_c *StateDB_AddBalance_Call) Run(run func(_a0 common.Address, _a1 *big.Int)) *StateDB_AddBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(*big.Int))
	})
	return _c
}

func (_c *StateDB_AddBalance_Call) Return() *StateDB_AddBalance_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_AddBalance_Call) RunAndReturn(run func(common.Address, *big.Int)) *StateDB_AddBalance_Call {
	_c.Call.Return(run)
	return _c
}

// AddLog provides a mock function with given fields: _a0.
func (_m *StateDB) AddLog(_a0 *types.Log) {
	_m.Called(_a0)
}

// StateDB_AddLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLog'.
type StateDB_AddLog_Call struct {
	*mock.Call
}

// AddLog is a helper method to define mock.On call
//   - _a0 *types.Log
func (_e *StateDB_Expecter) AddLog(_a0 interface{}) *StateDB_AddLog_Call {
	return &StateDB_AddLog_Call{Call: _e.mock.On("AddLog", _a0)}
}

func (_c *StateDB_AddLog_Call) Run(run func(_a0 *types.Log)) *StateDB_AddLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*types.Log))
	})
	return _c
}

func (_c *StateDB_AddLog_Call) Return() *StateDB_AddLog_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_AddLog_Call) RunAndReturn(run func(*types.Log)) *StateDB_AddLog_Call {
	_c.Call.Return(run)
	return _c
}

// AddPreimage provides a mock function with given fields: _a0, _a1.
func (_m *StateDB) AddPreimage(_a0 common.Hash, _a1 []byte) {
	_m.Called(_a0, _a1)
}

// StateDB_AddPreimage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPreimage'.
type StateDB_AddPreimage_Call struct {
	*mock.Call
}

// AddPreimage is a helper method to define mock.On call
//   - _a0 common.Hash
//   - _a1 []byte
func (_e *StateDB_Expecter) AddPreimage(_a0 interface{}, _a1 interface{}) *StateDB_AddPreimage_Call {
	return &StateDB_AddPreimage_Call{Call: _e.mock.On("AddPreimage", _a0, _a1)}
}

func (_c *StateDB_AddPreimage_Call) Run(run func(_a0 common.Hash, _a1 []byte)) *StateDB_AddPreimage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash), args[1].([]byte))
	})
	return _c
}

func (_c *StateDB_AddPreimage_Call) Return() *StateDB_AddPreimage_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_AddPreimage_Call) RunAndReturn(run func(common.Hash, []byte)) *StateDB_AddPreimage_Call {
	_c.Call.Return(run)
	return _c
}

// AddRefund provides a mock function with given fields: _a0.
func (_m *StateDB) AddRefund(_a0 uint64) {
	_m.Called(_a0)
}

// StateDB_AddRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRefund'.
type StateDB_AddRefund_Call struct {
	*mock.Call
}

// AddRefund is a helper method to define mock.On call
//   - _a0 uint64
func (_e *StateDB_Expecter) AddRefund(_a0 interface{}) *StateDB_AddRefund_Call {
	return &StateDB_AddRefund_Call{Call: _e.mock.On("AddRefund", _a0)}
}

func (_c *StateDB_AddRefund_Call) Run(run func(_a0 uint64)) *StateDB_AddRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_AddRefund_Call) Return() *StateDB_AddRefund_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_AddRefund_Call) RunAndReturn(run func(uint64)) *StateDB_AddRefund_Call {
	_c.Call.Return(run)
	return _c
}

// AddSlotToAccessList provides a mock function with given fields: addr, slot.
func (_m *StateDB) AddSlotToAccessList(addr common.Address, slot common.Hash) {
	_m.Called(addr, slot)
}

// StateDB_AddSlotToAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddSlotToAccessList'.
type StateDB_AddSlotToAccessList_Call struct {
	*mock.Call
}

// AddSlotToAccessList is a helper method to define mock.On call
//   - addr common.Address
//   - slot common.Hash
func (_e *StateDB_Expecter) AddSlotToAccessList(addr interface{}, slot interface{}) *StateDB_AddSlotToAccessList_Call {
	return &StateDB_AddSlotToAccessList_Call{Call: _e.mock.On("AddSlotToAccessList", addr, slot)}
}

func (_c *StateDB_AddSlotToAccessList_Call) Run(run func(addr common.Address, slot common.Hash)) *StateDB_AddSlotToAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(common.Hash))
	})
	return _c
}

func (_c *StateDB_AddSlotToAccessList_Call) Return() *StateDB_AddSlotToAccessList_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_AddSlotToAccessList_Call) RunAndReturn(run func(common.Address, common.Hash)) *StateDB_AddSlotToAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// AddressInAccessList provides a mock function with given fields: addr.
func (_m *StateDB) AddressInAccessList(addr common.Address) bool {
	ret := _m.Called(addr)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StateDB_AddressInAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressInAccessList'.
type StateDB_AddressInAccessList_Call struct {
	*mock.Call
}

// AddressInAccessList is a helper method to define mock.On call
//   - addr common.Address
func (_e *StateDB_Expecter) AddressInAccessList(addr interface{}) *StateDB_AddressInAccessList_Call {
	return &StateDB_AddressInAccessList_Call{Call: _e.mock.On("AddressInAccessList", addr)}
}

func (_c *StateDB_AddressInAccessList_Call) Run(run func(addr common.Address)) *StateDB_AddressInAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_AddressInAccessList_Call) Return(_a0 bool) *StateDB_AddressInAccessList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_AddressInAccessList_Call) RunAndReturn(run func(common.Address) bool) *StateDB_AddressInAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: _a0, _a1.
func (_m *StateDB) Commit(_a0 uint64, _a1 bool) (common.Hash, error) {
	ret := _m.Called(_a0, _a1)

	var r0 common.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, bool) (common.Hash, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(uint64, bool) common.Hash); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StateDB_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'.
type StateDB_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - _a0 uint64
//   - _a1 bool
func (_e *StateDB_Expecter) Commit(_a0 interface{}, _a1 interface{}) *StateDB_Commit_Call {
	return &StateDB_Commit_Call{Call: _e.mock.On("Commit", _a0, _a1)}
}

func (_c *StateDB_Commit_Call) Run(run func(_a0 uint64, _a1 bool)) *StateDB_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(bool))
	})
	return _c
}

func (_c *StateDB_Commit_Call) Return(_a0 common.Hash, _a1 error) *StateDB_Commit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StateDB_Commit_Call) RunAndReturn(run func(uint64, bool) (common.Hash, error)) *StateDB_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Copy provides a mock function with given fields:.
func (_m *StateDB) Copy() corestate.StateDBI {
	ret := _m.Called()

	var r0 corestate.StateDBI
	if rf, ok := ret.Get(0).(func() corestate.StateDBI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corestate.StateDBI)
		}
	}

	return r0
}

// StateDB_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'.
type StateDB_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call.
func (_e *StateDB_Expecter) Copy() *StateDB_Copy_Call {
	return &StateDB_Copy_Call{Call: _e.mock.On("Copy")}
}

func (_c *StateDB_Copy_Call) Run(run func()) *StateDB_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_Copy_Call) Return(_a0 corestate.StateDBI) *StateDB_Copy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Copy_Call) RunAndReturn(run func() corestate.StateDBI) *StateDB_Copy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccount provides a mock function with given fields: _a0.
func (_m *StateDB) CreateAccount(_a0 common.Address) {
	_m.Called(_a0)
}

// StateDB_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'.
type StateDB_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) CreateAccount(_a0 interface{}) *StateDB_CreateAccount_Call {
	return &StateDB_CreateAccount_Call{Call: _e.mock.On("CreateAccount", _a0)}
}

func (_c *StateDB_CreateAccount_Call) Run(run func(_a0 common.Address)) *StateDB_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_CreateAccount_Call) Return() *StateDB_CreateAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_CreateAccount_Call) RunAndReturn(run func(common.Address)) *StateDB_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// Database provides a mock function with given fields:.
func (_m *StateDB) Database() corestate.Database {
	ret := _m.Called()

	var r0 corestate.Database
	if rf, ok := ret.Get(0).(func() corestate.Database); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(corestate.Database)
		}
	}

	return r0
}

// StateDB_Database_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Database'.
type StateDB_Database_Call struct {
	*mock.Call
}

// Database is a helper method to define mock.On call.
func (_e *StateDB_Expecter) Database() *StateDB_Database_Call {
	return &StateDB_Database_Call{Call: _e.mock.On("Database")}
}

func (_c *StateDB_Database_Call) Run(run func()) *StateDB_Database_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_Database_Call) Return(_a0 corestate.Database) *StateDB_Database_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Database_Call) RunAndReturn(run func() corestate.Database) *StateDB_Database_Call {
	_c.Call.Return(run)
	return _c
}

// Dump provides a mock function with given fields: opts.
func (_m *StateDB) Dump(opts *corestate.DumpConfig) []byte {
	ret := _m.Called(opts)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*corestate.DumpConfig) []byte); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// StateDB_Dump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dump'.
type StateDB_Dump_Call struct {
	*mock.Call
}

// Dump is a helper method to define mock.On call
//   - opts *corestate.DumpConfig
func (_e *StateDB_Expecter) Dump(opts interface{}) *StateDB_Dump_Call {
	return &StateDB_Dump_Call{Call: _e.mock.On("Dump", opts)}
}

func (_c *StateDB_Dump_Call) Run(run func(opts *corestate.DumpConfig)) *StateDB_Dump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corestate.DumpConfig))
	})
	return _c
}

func (_c *StateDB_Dump_Call) Return(_a0 []byte) *StateDB_Dump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Dump_Call) RunAndReturn(run func(*corestate.DumpConfig) []byte) *StateDB_Dump_Call {
	_c.Call.Return(run)
	return _c
}

// DumpToCollector provides a mock function with given fields: c, conf.
func (_m *StateDB) DumpToCollector(c corestate.DumpCollector, conf *corestate.DumpConfig) []byte {
	ret := _m.Called(c, conf)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(corestate.DumpCollector, *corestate.DumpConfig) []byte); ok {
		r0 = rf(c, conf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// StateDB_DumpToCollector_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DumpToCollector'.
type StateDB_DumpToCollector_Call struct {
	*mock.Call
}

// DumpToCollector is a helper method to define mock.On call
//   - c corestate.DumpCollector
//   - conf *corestate.DumpConfig
func (_e *StateDB_Expecter) DumpToCollector(c interface{}, conf interface{}) *StateDB_DumpToCollector_Call {
	return &StateDB_DumpToCollector_Call{Call: _e.mock.On("DumpToCollector", c, conf)}
}

func (_c *StateDB_DumpToCollector_Call) Run(run func(c corestate.DumpCollector, conf *corestate.DumpConfig)) *StateDB_DumpToCollector_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(corestate.DumpCollector), args[1].(*corestate.DumpConfig))
	})
	return _c
}

func (_c *StateDB_DumpToCollector_Call) Return(nextKey []byte) *StateDB_DumpToCollector_Call {
	_c.Call.Return(nextKey)
	return _c
}

func (_c *StateDB_DumpToCollector_Call) RunAndReturn(run func(corestate.DumpCollector, *corestate.DumpConfig) []byte) *StateDB_DumpToCollector_Call {
	_c.Call.Return(run)
	return _c
}

// Empty provides a mock function with given fields: _a0.
func (_m *StateDB) Empty(_a0 common.Address) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StateDB_Empty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Empty'.
type StateDB_Empty_Call struct {
	*mock.Call
}

// Empty is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) Empty(_a0 interface{}) *StateDB_Empty_Call {
	return &StateDB_Empty_Call{Call: _e.mock.On("Empty", _a0)}
}

func (_c *StateDB_Empty_Call) Run(run func(_a0 common.Address)) *StateDB_Empty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_Empty_Call) Return(_a0 bool) *StateDB_Empty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Empty_Call) RunAndReturn(run func(common.Address) bool) *StateDB_Empty_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields:.
func (_m *StateDB) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StateDB_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'.
type StateDB_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call.
func (_e *StateDB_Expecter) Error() *StateDB_Error_Call {
	return &StateDB_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *StateDB_Error_Call) Run(run func()) *StateDB_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_Error_Call) Return(_a0 error) *StateDB_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Error_Call) RunAndReturn(run func() error) *StateDB_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Exist provides a mock function with given fields: _a0.
func (_m *StateDB) Exist(_a0 common.Address) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StateDB_Exist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exist'.
type StateDB_Exist_Call struct {
	*mock.Call
}

// Exist is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) Exist(_a0 interface{}) *StateDB_Exist_Call {
	return &StateDB_Exist_Call{Call: _e.mock.On("Exist", _a0)}
}

func (_c *StateDB_Exist_Call) Run(run func(_a0 common.Address)) *StateDB_Exist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_Exist_Call) Return(_a0 bool) *StateDB_Exist_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Exist_Call) RunAndReturn(run func(common.Address) bool) *StateDB_Exist_Call {
	_c.Call.Return(run)
	return _c
}

// Finalise provides a mock function with given fields: deleteEmptyObjects.
func (_m *StateDB) Finalise(deleteEmptyObjects bool) {
	_m.Called(deleteEmptyObjects)
}

// StateDB_Finalise_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Finalise'.
type StateDB_Finalise_Call struct {
	*mock.Call
}

// Finalise is a helper method to define mock.On call
//   - deleteEmptyObjects bool
func (_e *StateDB_Expecter) Finalise(deleteEmptyObjects interface{}) *StateDB_Finalise_Call {
	return &StateDB_Finalise_Call{Call: _e.mock.On("Finalise", deleteEmptyObjects)}
}

func (_c *StateDB_Finalise_Call) Run(run func(deleteEmptyObjects bool)) *StateDB_Finalise_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *StateDB_Finalise_Call) Return() *StateDB_Finalise_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_Finalise_Call) RunAndReturn(run func(bool)) *StateDB_Finalise_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: _a0.
func (_m *StateDB) GetBalance(_a0 common.Address) *big.Int {
	ret := _m.Called(_a0)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(common.Address) *big.Int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// StateDB_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'.
type StateDB_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) GetBalance(_a0 interface{}) *StateDB_GetBalance_Call {
	return &StateDB_GetBalance_Call{Call: _e.mock.On("GetBalance", _a0)}
}

func (_c *StateDB_GetBalance_Call) Run(run func(_a0 common.Address)) *StateDB_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_GetBalance_Call) Return(_a0 *big.Int) *StateDB_GetBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetBalance_Call) RunAndReturn(run func(common.Address) *big.Int) *StateDB_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetCode provides a mock function with given fields: _a0.
func (_m *StateDB) GetCode(_a0 common.Address) []byte {
	ret := _m.Called(_a0)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(common.Address) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// StateDB_GetCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCode'.
type StateDB_GetCode_Call struct {
	*mock.Call
}

// GetCode is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) GetCode(_a0 interface{}) *StateDB_GetCode_Call {
	return &StateDB_GetCode_Call{Call: _e.mock.On("GetCode", _a0)}
}

func (_c *StateDB_GetCode_Call) Run(run func(_a0 common.Address)) *StateDB_GetCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_GetCode_Call) Return(_a0 []byte) *StateDB_GetCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetCode_Call) RunAndReturn(run func(common.Address) []byte) *StateDB_GetCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeHash provides a mock function with given fields: _a0.
func (_m *StateDB) GetCodeHash(_a0 common.Address) common.Hash {
	ret := _m.Called(_a0)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(common.Address) common.Hash); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// StateDB_GetCodeHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeHash'.
type StateDB_GetCodeHash_Call struct {
	*mock.Call
}

// GetCodeHash is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) GetCodeHash(_a0 interface{}) *StateDB_GetCodeHash_Call {
	return &StateDB_GetCodeHash_Call{Call: _e.mock.On("GetCodeHash", _a0)}
}

func (_c *StateDB_GetCodeHash_Call) Run(run func(_a0 common.Address)) *StateDB_GetCodeHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_GetCodeHash_Call) Return(_a0 common.Hash) *StateDB_GetCodeHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetCodeHash_Call) RunAndReturn(run func(common.Address) common.Hash) *StateDB_GetCodeHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetCodeSize provides a mock function with given fields: _a0.
func (_m *StateDB) GetCodeSize(_a0 common.Address) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(common.Address) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// StateDB_GetCodeSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCodeSize'.
type StateDB_GetCodeSize_Call struct {
	*mock.Call
}

// GetCodeSize is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) GetCodeSize(_a0 interface{}) *StateDB_GetCodeSize_Call {
	return &StateDB_GetCodeSize_Call{Call: _e.mock.On("GetCodeSize", _a0)}
}

func (_c *StateDB_GetCodeSize_Call) Run(run func(_a0 common.Address)) *StateDB_GetCodeSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_GetCodeSize_Call) Return(_a0 int) *StateDB_GetCodeSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetCodeSize_Call) RunAndReturn(run func(common.Address) int) *StateDB_GetCodeSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommittedState provides a mock function with given fields: _a0, _a1.
func (_m *StateDB) GetCommittedState(_a0 common.Address, _a1 common.Hash) common.Hash {
	ret := _m.Called(_a0, _a1)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(common.Address, common.Hash) common.Hash); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// StateDB_GetCommittedState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommittedState'.
type StateDB_GetCommittedState_Call struct {
	*mock.Call
}

// GetCommittedState is a helper method to define mock.On call
//   - _a0 common.Address
//   - _a1 common.Hash
func (_e *StateDB_Expecter) GetCommittedState(_a0 interface{}, _a1 interface{}) *StateDB_GetCommittedState_Call {
	return &StateDB_GetCommittedState_Call{Call: _e.mock.On("GetCommittedState", _a0, _a1)}
}

func (_c *StateDB_GetCommittedState_Call) Run(run func(_a0 common.Address, _a1 common.Hash)) *StateDB_GetCommittedState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(common.Hash))
	})
	return _c
}

func (_c *StateDB_GetCommittedState_Call) Return(_a0 common.Hash) *StateDB_GetCommittedState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetCommittedState_Call) RunAndReturn(run func(common.Address, common.Hash) common.Hash) *StateDB_GetCommittedState_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function with given fields:.
func (_m *StateDB) GetContext() context.Context {
	ret := _m.Called()

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// StateDB_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'.
type StateDB_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call.
func (_e *StateDB_Expecter) GetContext() *StateDB_GetContext_Call {
	return &StateDB_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *StateDB_GetContext_Call) Run(run func()) *StateDB_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetContext_Call) Return(_a0 context.Context) *StateDB_GetContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetContext_Call) RunAndReturn(run func() context.Context) *StateDB_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: hash, blockNumber, blockHash.
func (_m *StateDB) GetLogs(hash common.Hash, blockNumber uint64, blockHash common.Hash) []*types.Log {
	ret := _m.Called(hash, blockNumber, blockHash)

	var r0 []*types.Log
	if rf, ok := ret.Get(0).(func(common.Hash, uint64, common.Hash) []*types.Log); ok {
		r0 = rf(hash, blockNumber, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Log)
		}
	}

	return r0
}

// StateDB_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'.
type StateDB_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - hash common.Hash
//   - blockNumber uint64
//   - blockHash common.Hash
func (_e *StateDB_Expecter) GetLogs(hash interface{}, blockNumber interface{}, blockHash interface{}) *StateDB_GetLogs_Call {
	return &StateDB_GetLogs_Call{Call: _e.mock.On("GetLogs", hash, blockNumber, blockHash)}
}

func (_c *StateDB_GetLogs_Call) Run(run func(hash common.Hash, blockNumber uint64, blockHash common.Hash)) *StateDB_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash), args[1].(uint64), args[2].(common.Hash))
	})
	return _c
}

func (_c *StateDB_GetLogs_Call) Return(_a0 []*types.Log) *StateDB_GetLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetLogs_Call) RunAndReturn(run func(common.Hash, uint64, common.Hash) []*types.Log) *StateDB_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetNonce provides a mock function with given fields: _a0.
func (_m *StateDB) GetNonce(_a0 common.Address) uint64 {
	ret := _m.Called(_a0)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// StateDB_GetNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNonce'.
type StateDB_GetNonce_Call struct {
	*mock.Call
}

// GetNonce is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) GetNonce(_a0 interface{}) *StateDB_GetNonce_Call {
	return &StateDB_GetNonce_Call{Call: _e.mock.On("GetNonce", _a0)}
}

func (_c *StateDB_GetNonce_Call) Run(run func(_a0 common.Address)) *StateDB_GetNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_GetNonce_Call) Return(_a0 uint64) *StateDB_GetNonce_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetNonce_Call) RunAndReturn(run func(common.Address) uint64) *StateDB_GetNonce_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrNewStateObject provides a mock function with given fields: addr.
func (_m *StateDB) GetOrNewStateObject(addr common.Address) *corestate.StateObject {
	ret := _m.Called(addr)

	var r0 *corestate.StateObject
	if rf, ok := ret.Get(0).(func(common.Address) *corestate.StateObject); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*corestate.StateObject)
		}
	}

	return r0
}

// StateDB_GetOrNewStateObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrNewStateObject'.
type StateDB_GetOrNewStateObject_Call struct {
	*mock.Call
}

// GetOrNewStateObject is a helper method to define mock.On call
//   - addr common.Address
func (_e *StateDB_Expecter) GetOrNewStateObject(addr interface{}) *StateDB_GetOrNewStateObject_Call {
	return &StateDB_GetOrNewStateObject_Call{Call: _e.mock.On("GetOrNewStateObject", addr)}
}

func (_c *StateDB_GetOrNewStateObject_Call) Run(run func(addr common.Address)) *StateDB_GetOrNewStateObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_GetOrNewStateObject_Call) Return(_a0 *corestate.StateObject) *StateDB_GetOrNewStateObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetOrNewStateObject_Call) RunAndReturn(run func(common.Address) *corestate.StateObject) *StateDB_GetOrNewStateObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetPrecompileManager provides a mock function with given fields:.
func (_m *StateDB) GetPrecompileManager() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// StateDB_GetPrecompileManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPrecompileManager'.
type StateDB_GetPrecompileManager_Call struct {
	*mock.Call
}

// GetPrecompileManager is a helper method to define mock.On call.
func (_e *StateDB_Expecter) GetPrecompileManager() *StateDB_GetPrecompileManager_Call {
	return &StateDB_GetPrecompileManager_Call{Call: _e.mock.On("GetPrecompileManager")}
}

func (_c *StateDB_GetPrecompileManager_Call) Run(run func()) *StateDB_GetPrecompileManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetPrecompileManager_Call) Return(_a0 interface{}) *StateDB_GetPrecompileManager_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetPrecompileManager_Call) RunAndReturn(run func() interface{}) *StateDB_GetPrecompileManager_Call {
	_c.Call.Return(run)
	return _c
}

// GetRefund provides a mock function with given fields:.
func (_m *StateDB) GetRefund() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// StateDB_GetRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRefund'.
type StateDB_GetRefund_Call struct {
	*mock.Call
}

// GetRefund is a helper method to define mock.On call.
func (_e *StateDB_Expecter) GetRefund() *StateDB_GetRefund_Call {
	return &StateDB_GetRefund_Call{Call: _e.mock.On("GetRefund")}
}

func (_c *StateDB_GetRefund_Call) Run(run func()) *StateDB_GetRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_GetRefund_Call) Return(_a0 uint64) *StateDB_GetRefund_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetRefund_Call) RunAndReturn(run func() uint64) *StateDB_GetRefund_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields: _a0, _a1.
func (_m *StateDB) GetState(_a0 common.Address, _a1 common.Hash) common.Hash {
	ret := _m.Called(_a0, _a1)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(common.Address, common.Hash) common.Hash); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// StateDB_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'.
type StateDB_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - _a0 common.Address
//   - _a1 common.Hash
func (_e *StateDB_Expecter) GetState(_a0 interface{}, _a1 interface{}) *StateDB_GetState_Call {
	return &StateDB_GetState_Call{Call: _e.mock.On("GetState", _a0, _a1)}
}

func (_c *StateDB_GetState_Call) Run(run func(_a0 common.Address, _a1 common.Hash)) *StateDB_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(common.Hash))
	})
	return _c
}

func (_c *StateDB_GetState_Call) Return(_a0 common.Hash) *StateDB_GetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetState_Call) RunAndReturn(run func(common.Address, common.Hash) common.Hash) *StateDB_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// GetStorageRoot provides a mock function with given fields: addr.
func (_m *StateDB) GetStorageRoot(addr common.Address) common.Hash {
	ret := _m.Called(addr)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(common.Address) common.Hash); ok {
		r0 = rf(addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// StateDB_GetStorageRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStorageRoot'.
type StateDB_GetStorageRoot_Call struct {
	*mock.Call
}

// GetStorageRoot is a helper method to define mock.On call
//   - addr common.Address
func (_e *StateDB_Expecter) GetStorageRoot(addr interface{}) *StateDB_GetStorageRoot_Call {
	return &StateDB_GetStorageRoot_Call{Call: _e.mock.On("GetStorageRoot", addr)}
}

func (_c *StateDB_GetStorageRoot_Call) Run(run func(addr common.Address)) *StateDB_GetStorageRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_GetStorageRoot_Call) Return(_a0 common.Hash) *StateDB_GetStorageRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetStorageRoot_Call) RunAndReturn(run func(common.Address) common.Hash) *StateDB_GetStorageRoot_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransientState provides a mock function with given fields: addr, key.
func (_m *StateDB) GetTransientState(addr common.Address, key common.Hash) common.Hash {
	ret := _m.Called(addr, key)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(common.Address, common.Hash) common.Hash); ok {
		r0 = rf(addr, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// StateDB_GetTransientState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransientState'.
type StateDB_GetTransientState_Call struct {
	*mock.Call
}

// GetTransientState is a helper method to define mock.On call
//   - addr common.Address
//   - key common.Hash
func (_e *StateDB_Expecter) GetTransientState(addr interface{}, key interface{}) *StateDB_GetTransientState_Call {
	return &StateDB_GetTransientState_Call{Call: _e.mock.On("GetTransientState", addr, key)}
}

func (_c *StateDB_GetTransientState_Call) Run(run func(addr common.Address, key common.Hash)) *StateDB_GetTransientState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(common.Hash))
	})
	return _c
}

func (_c *StateDB_GetTransientState_Call) Return(_a0 common.Hash) *StateDB_GetTransientState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_GetTransientState_Call) RunAndReturn(run func(common.Address, common.Hash) common.Hash) *StateDB_GetTransientState_Call {
	_c.Call.Return(run)
	return _c
}

// HasSelfDestructed provides a mock function with given fields: _a0.
func (_m *StateDB) HasSelfDestructed(_a0 common.Address) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StateDB_HasSelfDestructed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSelfDestructed'.
type StateDB_HasSelfDestructed_Call struct {
	*mock.Call
}

// HasSelfDestructed is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) HasSelfDestructed(_a0 interface{}) *StateDB_HasSelfDestructed_Call {
	return &StateDB_HasSelfDestructed_Call{Call: _e.mock.On("HasSelfDestructed", _a0)}
}

func (_c *StateDB_HasSelfDestructed_Call) Run(run func(_a0 common.Address)) *StateDB_HasSelfDestructed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_HasSelfDestructed_Call) Return(_a0 bool) *StateDB_HasSelfDestructed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_HasSelfDestructed_Call) RunAndReturn(run func(common.Address) bool) *StateDB_HasSelfDestructed_Call {
	_c.Call.Return(run)
	return _c
}

// IntermediateRoot provides a mock function with given fields: deleteEmptyObjects.
func (_m *StateDB) IntermediateRoot(deleteEmptyObjects bool) common.Hash {
	ret := _m.Called(deleteEmptyObjects)

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func(bool) common.Hash); ok {
		r0 = rf(deleteEmptyObjects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	return r0
}

// StateDB_IntermediateRoot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IntermediateRoot'.
type StateDB_IntermediateRoot_Call struct {
	*mock.Call
}

// IntermediateRoot is a helper method to define mock.On call
//   - deleteEmptyObjects bool
func (_e *StateDB_Expecter) IntermediateRoot(deleteEmptyObjects interface{}) *StateDB_IntermediateRoot_Call {
	return &StateDB_IntermediateRoot_Call{Call: _e.mock.On("IntermediateRoot", deleteEmptyObjects)}
}

func (_c *StateDB_IntermediateRoot_Call) Run(run func(deleteEmptyObjects bool)) *StateDB_IntermediateRoot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *StateDB_IntermediateRoot_Call) Return(_a0 common.Hash) *StateDB_IntermediateRoot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_IntermediateRoot_Call) RunAndReturn(run func(bool) common.Hash) *StateDB_IntermediateRoot_Call {
	_c.Call.Return(run)
	return _c
}

// IteratorDump provides a mock function with given fields: opts.
func (_m *StateDB) IteratorDump(opts *corestate.DumpConfig) corestate.IteratorDump {
	ret := _m.Called(opts)

	var r0 corestate.IteratorDump
	if rf, ok := ret.Get(0).(func(*corestate.DumpConfig) corestate.IteratorDump); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(corestate.IteratorDump)
	}

	return r0
}

// StateDB_IteratorDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IteratorDump'.
type StateDB_IteratorDump_Call struct {
	*mock.Call
}

// IteratorDump is a helper method to define mock.On call
//   - opts *corestate.DumpConfig
func (_e *StateDB_Expecter) IteratorDump(opts interface{}) *StateDB_IteratorDump_Call {
	return &StateDB_IteratorDump_Call{Call: _e.mock.On("IteratorDump", opts)}
}

func (_c *StateDB_IteratorDump_Call) Run(run func(opts *corestate.DumpConfig)) *StateDB_IteratorDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corestate.DumpConfig))
	})
	return _c
}

func (_c *StateDB_IteratorDump_Call) Return(_a0 corestate.IteratorDump) *StateDB_IteratorDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_IteratorDump_Call) RunAndReturn(run func(*corestate.DumpConfig) corestate.IteratorDump) *StateDB_IteratorDump_Call {
	_c.Call.Return(run)
	return _c
}

// Logs provides a mock function with given fields:.
func (_m *StateDB) Logs() []*types.Log {
	ret := _m.Called()

	var r0 []*types.Log
	if rf, ok := ret.Get(0).(func() []*types.Log); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.Log)
		}
	}

	return r0
}

// StateDB_Logs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logs'.
type StateDB_Logs_Call struct {
	*mock.Call
}

// Logs is a helper method to define mock.On call.
func (_e *StateDB_Expecter) Logs() *StateDB_Logs_Call {
	return &StateDB_Logs_Call{Call: _e.mock.On("Logs")}
}

func (_c *StateDB_Logs_Call) Run(run func()) *StateDB_Logs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_Logs_Call) Return(_a0 []*types.Log) *StateDB_Logs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Logs_Call) RunAndReturn(run func() []*types.Log) *StateDB_Logs_Call {
	_c.Call.Return(run)
	return _c
}

// Preimages provides a mock function with given fields:.
func (_m *StateDB) Preimages() map[common.Hash][]byte {
	ret := _m.Called()

	var r0 map[common.Hash][]byte
	if rf, ok := ret.Get(0).(func() map[common.Hash][]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.Hash][]byte)
		}
	}

	return r0
}

// StateDB_Preimages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Preimages'.
type StateDB_Preimages_Call struct {
	*mock.Call
}

// Preimages is a helper method to define mock.On call.
func (_e *StateDB_Expecter) Preimages() *StateDB_Preimages_Call {
	return &StateDB_Preimages_Call{Call: _e.mock.On("Preimages")}
}

func (_c *StateDB_Preimages_Call) Run(run func()) *StateDB_Preimages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_Preimages_Call) Return(_a0 map[common.Hash][]byte) *StateDB_Preimages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Preimages_Call) RunAndReturn(run func() map[common.Hash][]byte) *StateDB_Preimages_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function with given fields: rules, sender, coinbase, dest, precompiles, txAccesses.
func (_m *StateDB) Prepare(rules params.Rules, sender common.Address, coinbase common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList) {
	_m.Called(rules, sender, coinbase, dest, precompiles, txAccesses)
}

// StateDB_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'.
type StateDB_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - rules params.Rules
//   - sender common.Address
//   - coinbase common.Address
//   - dest *common.Address
//   - precompiles []common.Address
//   - txAccesses types.AccessList
func (_e *StateDB_Expecter) Prepare(rules interface{}, sender interface{}, coinbase interface{}, dest interface{}, precompiles interface{}, txAccesses interface{}) *StateDB_Prepare_Call {
	return &StateDB_Prepare_Call{Call: _e.mock.On("Prepare", rules, sender, coinbase, dest, precompiles, txAccesses)}
}

func (_c *StateDB_Prepare_Call) Run(run func(rules params.Rules, sender common.Address, coinbase common.Address, dest *common.Address, precompiles []common.Address, txAccesses types.AccessList)) *StateDB_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(params.Rules), args[1].(common.Address), args[2].(common.Address), args[3].(*common.Address), args[4].([]common.Address), args[5].(types.AccessList))
	})
	return _c
}

func (_c *StateDB_Prepare_Call) Return() *StateDB_Prepare_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_Prepare_Call) RunAndReturn(run func(params.Rules, common.Address, common.Address, *common.Address, []common.Address, types.AccessList)) *StateDB_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// RawDump provides a mock function with given fields: opts.
func (_m *StateDB) RawDump(opts *corestate.DumpConfig) corestate.Dump {
	ret := _m.Called(opts)

	var r0 corestate.Dump
	if rf, ok := ret.Get(0).(func(*corestate.DumpConfig) corestate.Dump); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(corestate.Dump)
	}

	return r0
}

// StateDB_RawDump_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RawDump'.
type StateDB_RawDump_Call struct {
	*mock.Call
}

// RawDump is a helper method to define mock.On call
//   - opts *corestate.DumpConfig
func (_e *StateDB_Expecter) RawDump(opts interface{}) *StateDB_RawDump_Call {
	return &StateDB_RawDump_Call{Call: _e.mock.On("RawDump", opts)}
}

func (_c *StateDB_RawDump_Call) Run(run func(opts *corestate.DumpConfig)) *StateDB_RawDump_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*corestate.DumpConfig))
	})
	return _c
}

func (_c *StateDB_RawDump_Call) Return(_a0 corestate.Dump) *StateDB_RawDump_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_RawDump_Call) RunAndReturn(run func(*corestate.DumpConfig) corestate.Dump) *StateDB_RawDump_Call {
	_c.Call.Return(run)
	return _c
}

// RevertToSnapshot provides a mock function with given fields: _a0.
func (_m *StateDB) RevertToSnapshot(_a0 int) {
	_m.Called(_a0)
}

// StateDB_RevertToSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevertToSnapshot'.
type StateDB_RevertToSnapshot_Call struct {
	*mock.Call
}

// RevertToSnapshot is a helper method to define mock.On call
//   - _a0 int
func (_e *StateDB_Expecter) RevertToSnapshot(_a0 interface{}) *StateDB_RevertToSnapshot_Call {
	return &StateDB_RevertToSnapshot_Call{Call: _e.mock.On("RevertToSnapshot", _a0)}
}

func (_c *StateDB_RevertToSnapshot_Call) Run(run func(_a0 int)) *StateDB_RevertToSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *StateDB_RevertToSnapshot_Call) Return() *StateDB_RevertToSnapshot_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_RevertToSnapshot_Call) RunAndReturn(run func(int)) *StateDB_RevertToSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// SelfDestruct provides a mock function with given fields: _a0.
func (_m *StateDB) SelfDestruct(_a0 common.Address) {
	_m.Called(_a0)
}

// StateDB_SelfDestruct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelfDestruct'.
type StateDB_SelfDestruct_Call struct {
	*mock.Call
}

// SelfDestruct is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) SelfDestruct(_a0 interface{}) *StateDB_SelfDestruct_Call {
	return &StateDB_SelfDestruct_Call{Call: _e.mock.On("SelfDestruct", _a0)}
}

func (_c *StateDB_SelfDestruct_Call) Run(run func(_a0 common.Address)) *StateDB_SelfDestruct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_SelfDestruct_Call) Return() *StateDB_SelfDestruct_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SelfDestruct_Call) RunAndReturn(run func(common.Address)) *StateDB_SelfDestruct_Call {
	_c.Call.Return(run)
	return _c
}

// Selfdestruct6780 provides a mock function with given fields: _a0.
func (_m *StateDB) Selfdestruct6780(_a0 common.Address) {
	_m.Called(_a0)
}

// StateDB_Selfdestruct6780_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Selfdestruct6780'.
type StateDB_Selfdestruct6780_Call struct {
	*mock.Call
}

// Selfdestruct6780 is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *StateDB_Expecter) Selfdestruct6780(_a0 interface{}) *StateDB_Selfdestruct6780_Call {
	return &StateDB_Selfdestruct6780_Call{Call: _e.mock.On("Selfdestruct6780", _a0)}
}

func (_c *StateDB_Selfdestruct6780_Call) Run(run func(_a0 common.Address)) *StateDB_Selfdestruct6780_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *StateDB_Selfdestruct6780_Call) Return() *StateDB_Selfdestruct6780_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_Selfdestruct6780_Call) RunAndReturn(run func(common.Address)) *StateDB_Selfdestruct6780_Call {
	_c.Call.Return(run)
	return _c
}

// SetBalance provides a mock function with given fields: addr, amount.
func (_m *StateDB) SetBalance(addr common.Address, amount *big.Int) {
	_m.Called(addr, amount)
}

// StateDB_SetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBalance'.
type StateDB_SetBalance_Call struct {
	*mock.Call
}

// SetBalance is a helper method to define mock.On call
//   - addr common.Address
//   - amount *big.Int
func (_e *StateDB_Expecter) SetBalance(addr interface{}, amount interface{}) *StateDB_SetBalance_Call {
	return &StateDB_SetBalance_Call{Call: _e.mock.On("SetBalance", addr, amount)}
}

func (_c *StateDB_SetBalance_Call) Run(run func(addr common.Address, amount *big.Int)) *StateDB_SetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(*big.Int))
	})
	return _c
}

func (_c *StateDB_SetBalance_Call) Return() *StateDB_SetBalance_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SetBalance_Call) RunAndReturn(run func(common.Address, *big.Int)) *StateDB_SetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SetCode provides a mock function with given fields: _a0, _a1.
func (_m *StateDB) SetCode(_a0 common.Address, _a1 []byte) {
	_m.Called(_a0, _a1)
}

// StateDB_SetCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCode'.
type StateDB_SetCode_Call struct {
	*mock.Call
}

// SetCode is a helper method to define mock.On call
//   - _a0 common.Address
//   - _a1 []byte
func (_e *StateDB_Expecter) SetCode(_a0 interface{}, _a1 interface{}) *StateDB_SetCode_Call {
	return &StateDB_SetCode_Call{Call: _e.mock.On("SetCode", _a0, _a1)}
}

func (_c *StateDB_SetCode_Call) Run(run func(_a0 common.Address, _a1 []byte)) *StateDB_SetCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].([]byte))
	})
	return _c
}

func (_c *StateDB_SetCode_Call) Return() *StateDB_SetCode_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SetCode_Call) RunAndReturn(run func(common.Address, []byte)) *StateDB_SetCode_Call {
	_c.Call.Return(run)
	return _c
}

// SetNonce provides a mock function with given fields: _a0, _a1.
func (_m *StateDB) SetNonce(_a0 common.Address, _a1 uint64) {
	_m.Called(_a0, _a1)
}

// StateDB_SetNonce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNonce'.
type StateDB_SetNonce_Call struct {
	*mock.Call
}

// SetNonce is a helper method to define mock.On call
//   - _a0 common.Address
//   - _a1 uint64
func (_e *StateDB_Expecter) SetNonce(_a0 interface{}, _a1 interface{}) *StateDB_SetNonce_Call {
	return &StateDB_SetNonce_Call{Call: _e.mock.On("SetNonce", _a0, _a1)}
}

func (_c *StateDB_SetNonce_Call) Run(run func(_a0 common.Address, _a1 uint64)) *StateDB_SetNonce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(uint64))
	})
	return _c
}

func (_c *StateDB_SetNonce_Call) Return() *StateDB_SetNonce_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SetNonce_Call) RunAndReturn(run func(common.Address, uint64)) *StateDB_SetNonce_Call {
	_c.Call.Return(run)
	return _c
}

// SetState provides a mock function with given fields: _a0, _a1, _a2.
func (_m *StateDB) SetState(_a0 common.Address, _a1 common.Hash, _a2 common.Hash) {
	_m.Called(_a0, _a1, _a2)
}

// StateDB_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'.
type StateDB_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - _a0 common.Address
//   - _a1 common.Hash
//   - _a2 common.Hash
func (_e *StateDB_Expecter) SetState(_a0 interface{}, _a1 interface{}, _a2 interface{}) *StateDB_SetState_Call {
	return &StateDB_SetState_Call{Call: _e.mock.On("SetState", _a0, _a1, _a2)}
}

func (_c *StateDB_SetState_Call) Run(run func(_a0 common.Address, _a1 common.Hash, _a2 common.Hash)) *StateDB_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(common.Hash), args[2].(common.Hash))
	})
	return _c
}

func (_c *StateDB_SetState_Call) Return() *StateDB_SetState_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SetState_Call) RunAndReturn(run func(common.Address, common.Hash, common.Hash)) *StateDB_SetState_Call {
	_c.Call.Return(run)
	return _c
}

// SetStorage provides a mock function with given fields: addr, storage.
func (_m *StateDB) SetStorage(addr common.Address, storage map[common.Hash]common.Hash) {
	_m.Called(addr, storage)
}

// StateDB_SetStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStorage'.
type StateDB_SetStorage_Call struct {
	*mock.Call
}

// SetStorage is a helper method to define mock.On call
//   - addr common.Address
//   - storage map[common.Hash]common.Hash
func (_e *StateDB_Expecter) SetStorage(addr interface{}, storage interface{}) *StateDB_SetStorage_Call {
	return &StateDB_SetStorage_Call{Call: _e.mock.On("SetStorage", addr, storage)}
}

func (_c *StateDB_SetStorage_Call) Run(run func(addr common.Address, storage map[common.Hash]common.Hash)) *StateDB_SetStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(map[common.Hash]common.Hash))
	})
	return _c
}

func (_c *StateDB_SetStorage_Call) Return() *StateDB_SetStorage_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SetStorage_Call) RunAndReturn(run func(common.Address, map[common.Hash]common.Hash)) *StateDB_SetStorage_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransientState provides a mock function with given fields: addr, key, value.
func (_m *StateDB) SetTransientState(addr common.Address, key common.Hash, value common.Hash) {
	_m.Called(addr, key, value)
}

// StateDB_SetTransientState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransientState'.
type StateDB_SetTransientState_Call struct {
	*mock.Call
}

// SetTransientState is a helper method to define mock.On call
//   - addr common.Address
//   - key common.Hash
//   - value common.Hash
func (_e *StateDB_Expecter) SetTransientState(addr interface{}, key interface{}, value interface{}) *StateDB_SetTransientState_Call {
	return &StateDB_SetTransientState_Call{Call: _e.mock.On("SetTransientState", addr, key, value)}
}

func (_c *StateDB_SetTransientState_Call) Run(run func(addr common.Address, key common.Hash, value common.Hash)) *StateDB_SetTransientState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(common.Hash), args[2].(common.Hash))
	})
	return _c
}

func (_c *StateDB_SetTransientState_Call) Return() *StateDB_SetTransientState_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SetTransientState_Call) RunAndReturn(run func(common.Address, common.Hash, common.Hash)) *StateDB_SetTransientState_Call {
	_c.Call.Return(run)
	return _c
}

// SetTxContext provides a mock function with given fields: thash, ti.
func (_m *StateDB) SetTxContext(thash common.Hash, ti int) {
	_m.Called(thash, ti)
}

// StateDB_SetTxContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTxContext'.
type StateDB_SetTxContext_Call struct {
	*mock.Call
}

// SetTxContext is a helper method to define mock.On call
//   - thash common.Hash
//   - ti int
func (_e *StateDB_Expecter) SetTxContext(thash interface{}, ti interface{}) *StateDB_SetTxContext_Call {
	return &StateDB_SetTxContext_Call{Call: _e.mock.On("SetTxContext", thash, ti)}
}

func (_c *StateDB_SetTxContext_Call) Run(run func(thash common.Hash, ti int)) *StateDB_SetTxContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Hash), args[1].(int))
	})
	return _c
}

func (_c *StateDB_SetTxContext_Call) Return() *StateDB_SetTxContext_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SetTxContext_Call) RunAndReturn(run func(common.Hash, int)) *StateDB_SetTxContext_Call {
	_c.Call.Return(run)
	return _c
}

// SlotInAccessList provides a mock function with given fields: addr, slot.
func (_m *StateDB) SlotInAccessList(addr common.Address, slot common.Hash) (bool, bool) {
	ret := _m.Called(addr, slot)

	var r0 bool
	var r1 bool
	if rf, ok := ret.Get(0).(func(common.Address, common.Hash) (bool, bool)); ok {
		return rf(addr, slot)
	}
	if rf, ok := ret.Get(0).(func(common.Address, common.Hash) bool); ok {
		r0 = rf(addr, slot)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(common.Address, common.Hash) bool); ok {
		r1 = rf(addr, slot)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// StateDB_SlotInAccessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlotInAccessList'.
type StateDB_SlotInAccessList_Call struct {
	*mock.Call
}

// SlotInAccessList is a helper method to define mock.On call
//   - addr common.Address
//   - slot common.Hash
func (_e *StateDB_Expecter) SlotInAccessList(addr interface{}, slot interface{}) *StateDB_SlotInAccessList_Call {
	return &StateDB_SlotInAccessList_Call{Call: _e.mock.On("SlotInAccessList", addr, slot)}
}

func (_c *StateDB_SlotInAccessList_Call) Run(run func(addr common.Address, slot common.Hash)) *StateDB_SlotInAccessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(common.Hash))
	})
	return _c
}

func (_c *StateDB_SlotInAccessList_Call) Return(addressOk bool, slotOk bool) *StateDB_SlotInAccessList_Call {
	_c.Call.Return(addressOk, slotOk)
	return _c
}

func (_c *StateDB_SlotInAccessList_Call) RunAndReturn(run func(common.Address, common.Hash) (bool, bool)) *StateDB_SlotInAccessList_Call {
	_c.Call.Return(run)
	return _c
}

// Snapshot provides a mock function with given fields:.
func (_m *StateDB) Snapshot() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// StateDB_Snapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapshot'.
type StateDB_Snapshot_Call struct {
	*mock.Call
}

// Snapshot is a helper method to define mock.On call.
func (_e *StateDB_Expecter) Snapshot() *StateDB_Snapshot_Call {
	return &StateDB_Snapshot_Call{Call: _e.mock.On("Snapshot")}
}

func (_c *StateDB_Snapshot_Call) Run(run func()) *StateDB_Snapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_Snapshot_Call) Return(_a0 int) *StateDB_Snapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_Snapshot_Call) RunAndReturn(run func() int) *StateDB_Snapshot_Call {
	_c.Call.Return(run)
	return _c
}

// StartPrefetcher provides a mock function with given fields: namespace.
func (_m *StateDB) StartPrefetcher(namespace string) {
	_m.Called(namespace)
}

// StateDB_StartPrefetcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartPrefetcher'.
type StateDB_StartPrefetcher_Call struct {
	*mock.Call
}

// StartPrefetcher is a helper method to define mock.On call
//   - namespace string
func (_e *StateDB_Expecter) StartPrefetcher(namespace interface{}) *StateDB_StartPrefetcher_Call {
	return &StateDB_StartPrefetcher_Call{Call: _e.mock.On("StartPrefetcher", namespace)}
}

func (_c *StateDB_StartPrefetcher_Call) Run(run func(namespace string)) *StateDB_StartPrefetcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StateDB_StartPrefetcher_Call) Return() *StateDB_StartPrefetcher_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_StartPrefetcher_Call) RunAndReturn(run func(string)) *StateDB_StartPrefetcher_Call {
	_c.Call.Return(run)
	return _c
}

// StopPrefetcher provides a mock function with given fields:.
func (_m *StateDB) StopPrefetcher() {
	_m.Called()
}

// StateDB_StopPrefetcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopPrefetcher'.
type StateDB_StopPrefetcher_Call struct {
	*mock.Call
}

// StopPrefetcher is a helper method to define mock.On call.
func (_e *StateDB_Expecter) StopPrefetcher() *StateDB_StopPrefetcher_Call {
	return &StateDB_StopPrefetcher_Call{Call: _e.mock.On("StopPrefetcher")}
}

func (_c *StateDB_StopPrefetcher_Call) Run(run func()) *StateDB_StopPrefetcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_StopPrefetcher_Call) Return() *StateDB_StopPrefetcher_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_StopPrefetcher_Call) RunAndReturn(run func()) *StateDB_StopPrefetcher_Call {
	_c.Call.Return(run)
	return _c
}

// SubBalance provides a mock function with given fields: _a0, _a1.
func (_m *StateDB) SubBalance(_a0 common.Address, _a1 *big.Int) {
	_m.Called(_a0, _a1)
}

// StateDB_SubBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubBalance'.
type StateDB_SubBalance_Call struct {
	*mock.Call
}

// SubBalance is a helper method to define mock.On call
//   - _a0 common.Address
//   - _a1 *big.Int
func (_e *StateDB_Expecter) SubBalance(_a0 interface{}, _a1 interface{}) *StateDB_SubBalance_Call {
	return &StateDB_SubBalance_Call{Call: _e.mock.On("SubBalance", _a0, _a1)}
}

func (_c *StateDB_SubBalance_Call) Run(run func(_a0 common.Address, _a1 *big.Int)) *StateDB_SubBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address), args[1].(*big.Int))
	})
	return _c
}

func (_c *StateDB_SubBalance_Call) Return() *StateDB_SubBalance_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SubBalance_Call) RunAndReturn(run func(common.Address, *big.Int)) *StateDB_SubBalance_Call {
	_c.Call.Return(run)
	return _c
}

// SubRefund provides a mock function with given fields: _a0.
func (_m *StateDB) SubRefund(_a0 uint64) {
	_m.Called(_a0)
}

// StateDB_SubRefund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubRefund'.
type StateDB_SubRefund_Call struct {
	*mock.Call
}

// SubRefund is a helper method to define mock.On call
//   - _a0 uint64
func (_e *StateDB_Expecter) SubRefund(_a0 interface{}) *StateDB_SubRefund_Call {
	return &StateDB_SubRefund_Call{Call: _e.mock.On("SubRefund", _a0)}
}

func (_c *StateDB_SubRefund_Call) Run(run func(_a0 uint64)) *StateDB_SubRefund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *StateDB_SubRefund_Call) Return() *StateDB_SubRefund_Call {
	_c.Call.Return()
	return _c
}

func (_c *StateDB_SubRefund_Call) RunAndReturn(run func(uint64)) *StateDB_SubRefund_Call {
	_c.Call.Return(run)
	return _c
}

// TxIndex provides a mock function with given fields:.
func (_m *StateDB) TxIndex() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// StateDB_TxIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxIndex'.
type StateDB_TxIndex_Call struct {
	*mock.Call
}

// TxIndex is a helper method to define mock.On call.
func (_e *StateDB_Expecter) TxIndex() *StateDB_TxIndex_Call {
	return &StateDB_TxIndex_Call{Call: _e.mock.On("TxIndex")}
}

func (_c *StateDB_TxIndex_Call) Run(run func()) *StateDB_TxIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StateDB_TxIndex_Call) Return(_a0 int) *StateDB_TxIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StateDB_TxIndex_Call) RunAndReturn(run func() int) *StateDB_TxIndex_Call {
	_c.Call.Return(run)
	return _c
}

// NewStateDB creates a new instance of StateDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStateDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *StateDB {
	mock := &StateDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
