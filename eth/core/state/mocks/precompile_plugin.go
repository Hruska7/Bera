// Code generated by mockery v2.35.1. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	mock "github.com/stretchr/testify/mock"
)

// PrecompilePlugin is an autogenerated mock type for the PrecompilePlugin type
type PrecompilePlugin struct {
	mock.Mock
}

type PrecompilePlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *PrecompilePlugin) EXPECT() *PrecompilePlugin_Expecter {
	return &PrecompilePlugin_Expecter{mock: &_m.Mock}
}

// Has provides a mock function with given fields: _a0
func (_m *PrecompilePlugin) Has(_a0 common.Address) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PrecompilePlugin_Has_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Has'
type PrecompilePlugin_Has_Call struct {
	*mock.Call
}

// Has is a helper method to define mock.On call
//   - _a0 common.Address
func (_e *PrecompilePlugin_Expecter) Has(_a0 interface{}) *PrecompilePlugin_Has_Call {
	return &PrecompilePlugin_Has_Call{Call: _e.mock.On("Has", _a0)}
}

func (_c *PrecompilePlugin_Has_Call) Run(run func(_a0 common.Address)) *PrecompilePlugin_Has_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *PrecompilePlugin_Has_Call) Return(_a0 bool) *PrecompilePlugin_Has_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PrecompilePlugin_Has_Call) RunAndReturn(run func(common.Address) bool) *PrecompilePlugin_Has_Call {
	_c.Call.Return(run)
	return _c
}

// NewPrecompilePlugin creates a new instance of PrecompilePlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrecompilePlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrecompilePlugin {
	mock := &PrecompilePlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
