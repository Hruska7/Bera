// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/state"
	ethereumcorevm "github.com/ethereum/go-ethereum/core/vm"
	"github.com/ethereum/go-ethereum/params"
	"math/big"
	ethcorevm "pkg.berachain.dev/stargazer/eth/core/vm"
	"sync"
)

// Ensure, that StargazerEVMMock does implement ethcorevm.StargazerEVM.
// If this is not the case, regenerate this file with moq.
var _ ethcorevm.StargazerEVM = &StargazerEVMMock{}

// StargazerEVMMock is a mock implementation of ethcorevm.StargazerEVM.
//
//	func TestSomethingThatUsesStargazerEVM(t *testing.T) {
//
//		// make and configure a mocked ethcorevm.StargazerEVM
//		mockedStargazerEVM := &StargazerEVMMock{
//			CallFunc: func(caller ethereumcorevm.ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) ([]byte, uint64, error) {
//				panic("mock out the Call method")
//			},
//			ChainConfigFunc: func() *params.ChainConfig {
//				panic("mock out the ChainConfig method")
//			},
//			CreateFunc: func(caller ethereumcorevm.ContractRef, code []byte, gas uint64, value *big.Int) ([]byte, common.Address, uint64, error) {
//				panic("mock out the Create method")
//			},
//			ResetFunc: func(txContext ethereumcorevm.TxContext, stateDBI state.StateDBI)  {
//				panic("mock out the Reset method")
//			},
//			UnderlyingEVMFunc: func() *ethereumcorevm.EVM {
//				panic("mock out the UnderlyingEVM method")
//			},
//		}
//
//		// use mockedStargazerEVM in code that requires ethcorevm.StargazerEVM
//		// and then make assertions.
//
//	}
type StargazerEVMMock struct {
	// CallFunc mocks the Call method.
	CallFunc func(caller ethereumcorevm.ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) ([]byte, uint64, error)

	// ChainConfigFunc mocks the ChainConfig method.
	ChainConfigFunc func() *params.ChainConfig

	// CreateFunc mocks the Create method.
	CreateFunc func(caller ethereumcorevm.ContractRef, code []byte, gas uint64, value *big.Int) ([]byte, common.Address, uint64, error)

	// ResetFunc mocks the Reset method.
	ResetFunc func(txContext ethereumcorevm.TxContext, stateDBI state.StateDBI)

	// UnderlyingEVMFunc mocks the UnderlyingEVM method.
	UnderlyingEVMFunc func() *ethereumcorevm.EVM

	// calls tracks calls to the methods.
	calls struct {
		// Call holds details about calls to the Call method.
		Call []struct {
			// Caller is the caller argument value.
			Caller ethereumcorevm.ContractRef
			// Addr is the addr argument value.
			Addr common.Address
			// Input is the input argument value.
			Input []byte
			// Gas is the gas argument value.
			Gas uint64
			// Value is the value argument value.
			Value *big.Int
		}
		// ChainConfig holds details about calls to the ChainConfig method.
		ChainConfig []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// Caller is the caller argument value.
			Caller ethereumcorevm.ContractRef
			// Code is the code argument value.
			Code []byte
			// Gas is the gas argument value.
			Gas uint64
			// Value is the value argument value.
			Value *big.Int
		}
		// Reset holds details about calls to the Reset method.
		Reset []struct {
			// TxContext is the txContext argument value.
			TxContext ethereumcorevm.TxContext
			// StateDBI is the stateDBI argument value.
			StateDBI state.StateDBI
		}
		// UnderlyingEVM holds details about calls to the UnderlyingEVM method.
		UnderlyingEVM []struct {
		}
	}
	lockCall          sync.RWMutex
	lockChainConfig   sync.RWMutex
	lockCreate        sync.RWMutex
	lockReset         sync.RWMutex
	lockUnderlyingEVM sync.RWMutex
}

// Call calls CallFunc.
func (mock *StargazerEVMMock) Call(caller ethereumcorevm.ContractRef, addr common.Address, input []byte, gas uint64, value *big.Int) ([]byte, uint64, error) {
	if mock.CallFunc == nil {
		panic("StargazerEVMMock.CallFunc: method is nil but StargazerEVM.Call was just called")
	}
	callInfo := struct {
		Caller ethereumcorevm.ContractRef
		Addr   common.Address
		Input  []byte
		Gas    uint64
		Value  *big.Int
	}{
		Caller: caller,
		Addr:   addr,
		Input:  input,
		Gas:    gas,
		Value:  value,
	}
	mock.lockCall.Lock()
	mock.calls.Call = append(mock.calls.Call, callInfo)
	mock.lockCall.Unlock()
	return mock.CallFunc(caller, addr, input, gas, value)
}

// CallCalls gets all the calls that were made to Call.
// Check the length with:
//
//	len(mockedStargazerEVM.CallCalls())
func (mock *StargazerEVMMock) CallCalls() []struct {
	Caller ethereumcorevm.ContractRef
	Addr   common.Address
	Input  []byte
	Gas    uint64
	Value  *big.Int
} {
	var calls []struct {
		Caller ethereumcorevm.ContractRef
		Addr   common.Address
		Input  []byte
		Gas    uint64
		Value  *big.Int
	}
	mock.lockCall.RLock()
	calls = mock.calls.Call
	mock.lockCall.RUnlock()
	return calls
}

// ChainConfig calls ChainConfigFunc.
func (mock *StargazerEVMMock) ChainConfig() *params.ChainConfig {
	if mock.ChainConfigFunc == nil {
		panic("StargazerEVMMock.ChainConfigFunc: method is nil but StargazerEVM.ChainConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockChainConfig.Lock()
	mock.calls.ChainConfig = append(mock.calls.ChainConfig, callInfo)
	mock.lockChainConfig.Unlock()
	return mock.ChainConfigFunc()
}

// ChainConfigCalls gets all the calls that were made to ChainConfig.
// Check the length with:
//
//	len(mockedStargazerEVM.ChainConfigCalls())
func (mock *StargazerEVMMock) ChainConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockChainConfig.RLock()
	calls = mock.calls.ChainConfig
	mock.lockChainConfig.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *StargazerEVMMock) Create(caller ethereumcorevm.ContractRef, code []byte, gas uint64, value *big.Int) ([]byte, common.Address, uint64, error) {
	if mock.CreateFunc == nil {
		panic("StargazerEVMMock.CreateFunc: method is nil but StargazerEVM.Create was just called")
	}
	callInfo := struct {
		Caller ethereumcorevm.ContractRef
		Code   []byte
		Gas    uint64
		Value  *big.Int
	}{
		Caller: caller,
		Code:   code,
		Gas:    gas,
		Value:  value,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(caller, code, gas, value)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedStargazerEVM.CreateCalls())
func (mock *StargazerEVMMock) CreateCalls() []struct {
	Caller ethereumcorevm.ContractRef
	Code   []byte
	Gas    uint64
	Value  *big.Int
} {
	var calls []struct {
		Caller ethereumcorevm.ContractRef
		Code   []byte
		Gas    uint64
		Value  *big.Int
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Reset calls ResetFunc.
func (mock *StargazerEVMMock) Reset(txContext ethereumcorevm.TxContext, stateDBI state.StateDBI) {
	if mock.ResetFunc == nil {
		panic("StargazerEVMMock.ResetFunc: method is nil but StargazerEVM.Reset was just called")
	}
	callInfo := struct {
		TxContext ethereumcorevm.TxContext
		StateDBI  state.StateDBI
	}{
		TxContext: txContext,
		StateDBI:  stateDBI,
	}
	mock.lockReset.Lock()
	mock.calls.Reset = append(mock.calls.Reset, callInfo)
	mock.lockReset.Unlock()
	mock.ResetFunc(txContext, stateDBI)
}

// ResetCalls gets all the calls that were made to Reset.
// Check the length with:
//
//	len(mockedStargazerEVM.ResetCalls())
func (mock *StargazerEVMMock) ResetCalls() []struct {
	TxContext ethereumcorevm.TxContext
	StateDBI  state.StateDBI
} {
	var calls []struct {
		TxContext ethereumcorevm.TxContext
		StateDBI  state.StateDBI
	}
	mock.lockReset.RLock()
	calls = mock.calls.Reset
	mock.lockReset.RUnlock()
	return calls
}

// UnderlyingEVM calls UnderlyingEVMFunc.
func (mock *StargazerEVMMock) UnderlyingEVM() *ethereumcorevm.EVM {
	if mock.UnderlyingEVMFunc == nil {
		panic("StargazerEVMMock.UnderlyingEVMFunc: method is nil but StargazerEVM.UnderlyingEVM was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUnderlyingEVM.Lock()
	mock.calls.UnderlyingEVM = append(mock.calls.UnderlyingEVM, callInfo)
	mock.lockUnderlyingEVM.Unlock()
	return mock.UnderlyingEVMFunc()
}

// UnderlyingEVMCalls gets all the calls that were made to UnderlyingEVM.
// Check the length with:
//
//	len(mockedStargazerEVM.UnderlyingEVMCalls())
func (mock *StargazerEVMMock) UnderlyingEVMCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockUnderlyingEVM.RLock()
	calls = mock.calls.UnderlyingEVM
	mock.lockUnderlyingEVM.RUnlock()
	return calls
}
