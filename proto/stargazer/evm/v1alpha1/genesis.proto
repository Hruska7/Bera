// SPDX-License-Identifier: BUSL-1.1
//
// Copyright (C) 2023, Berachain Foundation. All rights reserved.
// Use of this software is govered by the Business Source License included
// in the LICENSE file of this repository and at www.mariadb.com/bsl11.
//
// ANY USE OF THE LICENSED WORK IN VIOLATION OF THIS LICENSE WILL AUTOMATICALLY
// TERMINATE YOUR RIGHTS UNDER THIS LICENSE FOR THE CURRENT AND ALL OTHER
// VERSIONS OF THE LICENSED WORK.
//
// THIS LICENSE DOES NOT GRANT YOU ANY RIGHT IN ANY TRADEMARK OR LOGO OF
// LICENSOR OR ITS AFFILIATES (PROVIDED THAT YOU MAY USE A TRADEMARK OR LOGO OF
// LICENSOR AS EXPRESSLY REQUIRED BY THIS LICENSE).
//
// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE LICENSED WORK IS PROVIDED ON
// AN “AS IS” BASIS. LICENSOR HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS,
// EXPRESS OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND
// TITLE.

syntax = "proto3";
package stargazer.evm.v1alpha1;

import "gogoproto/gogo.proto";
import "stargazer/evm/v1alpha1/params.proto";

option go_package = "pkg.berachain.dev/stargazer/x/evm/types";

// GenesisState defines the evm module's genesis state.
message GenesisState {
  // params defines all the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false];

  // `address_to_contract_state` is the mapping of the address to the state record.
  map<string, ContractState> address_to_contract_state = 2;

  // // `address_to_state_record` is a mapping of the address to the state record/
  // map<string, StateRecord> address_to_state_record = 3;
}

// `CodeRecord` defines the code record of the evm state plugin.
message ContractState {
  // `address_to_hash` is the mapping of the address to the hash of the code.
  map<string, string> address_to_code_hash = 1;

  // `code` is the code of the contract, this is in format of byte slice.
  map<string, string> code_hash_to_code = 2;

  // `state` is a map of address to contract state.
  map<string, StateRecord> address_to_state_data = 3;
}

// `StateRecord` defines an evm state record. It includes a maping of slot to value.
message StateRecord {
  // `state` is a map of slot to value.
  map<string, string> state = 1;
}
